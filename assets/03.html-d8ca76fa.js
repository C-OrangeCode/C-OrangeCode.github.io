import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e as t}from"./app-a1fbcbb6.js";const e={},p=t(`<h2 id="循环结构" tabindex="-1"><a class="header-anchor" href="#循环结构" aria-hidden="true">#</a> 循环结构</h2><ul><li>C语言中提供了三大循环结构, 分别是while、dowhile和for</li><li>循环结构是程序中一种很重要的结构。 <ul><li>其特点是,在给定条件成立时,反复执行某程序段, 直到条件不成立为止。</li><li>给定的条件称为&quot;循环条件&quot;,反复执行的程序段称为&quot;循环体&quot;<br><img src="https://img-blog.csdnimg.cn/img_convert/d32037b3b82185eadb8c1f2ae4e2d160.png" alt="" loading="lazy"></li></ul></li></ul><h2 id="循环结构while" tabindex="-1"><a class="header-anchor" href="#循环结构while" aria-hidden="true">#</a> 循环结构while</h2><ul><li>格式:</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">while</span> <span class="token punctuation">(</span>  循环控制条件 <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    循环体中的语句<span class="token punctuation">;</span>
    能够让循环结束的语句<span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>构成循环结构的几个条件</p><ul><li>循环控制条件 <ul><li>循环退出的主要依据,来控制循环到底什么时候退出</li></ul></li><li>循环体 <ul><li>循环的过程中重复执行的代码段</li></ul></li><li>能够让循环结束的语句(递增、递减、真、假等) <ul><li>能够让循环条件为假的依据,否则退出循环</li></ul></li></ul></li><li><p>示例:</p></li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 循环控制条件</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;发射子弹~哔哔哔哔\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 需要反复执行的语句</span>
    count<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// 能够让循环结束的语句</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>while循环执行流程 <ul><li>首先会判定&quot;循环控制条件&quot;是否为真, 如果为假直接跳到循环语句后面</li><li>如果&quot;循环控制条件&quot;为真, 执行一次循环体, 然后再次判断&quot;循环控制条件&quot;是否为真, 为真继续执行循环体,为假跳出循环</li><li>重复以上操作, 直到&quot;循环控制条件&quot;为假为止</li></ul></li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
    <span class="token comment">// 1.判断循环控制条件是否为真,此时为假所以跳过循环语句</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;发射子弹~哔哔哔哔\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
        count<span class="token operator">++</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span>
    <span class="token comment">// 2.执行循环语句后面的代码, 打印&quot;循环执行完毕&quot;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;循环执行完毕\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">// 1.判断循环控制条件是否为真,此时0 &lt; 3为真</span>
    <span class="token comment">// 4.再次判断循环控制条件是否为真,此时1 &lt; 3为真</span>
    <span class="token comment">// 7.再次判断循环控制条件是否为真,此时2 &lt; 3为真</span>
    <span class="token comment">// 10.再次判断循环控制条件是否为真,此时3 &lt; 3为假, 跳过循环语句</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
        <span class="token comment">// 2.执行循环体中的代码, 打印&quot;发子弹&quot;</span>
        <span class="token comment">// 5.执行循环体中的代码, 打印&quot;发子弹&quot;</span>
        <span class="token comment">// 8.执行循环体中的代码, 打印&quot;发子弹&quot;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;发射子弹~哔哔哔哔\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token comment">// 3.执行&quot;能够让循环结束的语句&quot; count = 1</span>
        <span class="token comment">// 6.执行&quot;能够让循环结束的语句&quot; count = 2</span>
        <span class="token comment">// 9.执行&quot;能够让循环结束的语句&quot; count = 3</span>
        count<span class="token operator">++</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span>
    <span class="token comment">// 11.执行循环语句后面的代码, 打印&quot;循环执行完毕&quot;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;循环执行完毕\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><ul><li><em><strong>while循环注意点</strong></em><ul><li>任何数值都有真假性</li></ul></li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 死循环</span>
         <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;发射子弹~哔哔哔哔\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token comment">// 没有能够让循环结束的语句</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>当while后面只有一条语句时,while后面的大括号可以省略</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment">// 死循环</span>
         <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;发射子弹~哔哔哔哔\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token comment">// 没有能够让循环结束的语句</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>如果while省略了大括号, 那么后面不能定义变量</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment">// 死循环</span>
         <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">// 报错</span>
         <span class="token comment">// 没有能够让循环结束的语句</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>C语言中分号(;)也是一条语句, 称之为空语句</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">{</span> <span class="token comment">// 死循环</span>
       <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;发射子弹~哔哔哔哔\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
       count<span class="token operator">++</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>最简单的死循环</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">// 死循环一般在操作系统级别的应用程序会比较多, 日常开发中很少用</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><hr><ul><li>while练习 <ul><li>计算1 + 2 + 3 + ...n的和</li><li>获取1～100之间 7的倍数的个数</li></ul></li></ul><hr><h2 id="循环结构do-while" tabindex="-1"><a class="header-anchor" href="#循环结构do-while" aria-hidden="true">#</a> 循环结构do while</h2><ul><li>格式:</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">do</span> <span class="token punctuation">{</span>
    循环体中的语句<span class="token punctuation">;</span>
    能够让循环结束的语句<span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>循环控制条件 <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>示例</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">do</span> <span class="token punctuation">{</span>
   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;发射子弹~哔哔哔哔\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   count<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span>count <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>do-while循环执行流程</p><ul><li>首先不管while中的条件是否成立, 都会执行一次&quot;循环体&quot;</li><li>执行完一次循环体,接着再次判断while中的条件是否为真, 为真继续执行循环体,为假跳出循环</li><li>重复以上操作, 直到&quot;循环控制条件&quot;为假为止</li></ul></li><li><p>应用场景</p><ul><li>口令校验</li></ul></li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">do</span><span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;请输入密码,验证您的身份\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">123456</span> <span class="token operator">!=</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;主人,您终于回来了\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>while和dowhile应用场景 <ul><li>绝大多数情况下while和dowhile可以互换, 所以能用while就用while</li><li>无论如何都需要先执行一次循环体的情况, 才使用dowhile</li><li>do while 曾一度提议废除，但是他在输入性检查方面还是有点用的</li></ul></li></ul><hr><h2 id="循环结构for" tabindex="-1"><a class="header-anchor" href="#循环结构for" aria-hidden="true">#</a> 循环结构for</h2><ul><li>格式:</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">for</span><span class="token punctuation">(</span>初始化表达式；循环条件表达式；循环后的操作表达式<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    循环体中的语句<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>示例</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;发射子弹~哔哔哔哔\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>for循环执行流程</p><ul><li>首先执行&quot;初始化表达式&quot;，而且在整个循环过程中,<em><strong>只会执行一次</strong></em>初始化表达式</li><li>接着判断&quot;循环条件表达式&quot;是否为真，为真执行循环体中的语句</li><li>循环体执行完毕后，接下来会执行&quot;循环后的操作表达式&quot;，然后再次判断条件是否为真,为真继续执行循环体,为假跳出循环</li><li>重复上述过程，直到条件不成立就结束for循环</li></ul></li><li><p>for循环注意点:</p><ul><li>和while一模一样</li><li>最简单的死循环<code>for(;;);</code></li></ul></li><li><p>for和while应用场景</p><ul><li>while能做的for都能做, 所以企业开发中能用for就用for, 因为for更为灵活</li><li>而且对比while来说for更节约内存空间</li></ul></li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 初始化表达式</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 条件表达式</span>
      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;发射子弹~哔哔哔哔 %i\\n&quot;</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
      count<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// 循环后增量表达式</span>
<span class="token punctuation">}</span>
<span class="token comment">// 如果初始化表达式的值, 需要在循环之后使用, 那么就用while</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;count = %i\\n&quot;</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">// 注意: 在for循环初始化表达式中定义的变量, 只能在for循环后面的{}中访问</span>
<span class="token comment">// 所以: 如果初始化表达式的值, 不需要在循环之后使用, 那么就用for</span>
<span class="token comment">// 因为如果初始化表达式的值, 在循环之后就不需要使用了 , 那么用while会导致性能问题</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> count <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> count<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;发射子弹~哔哔哔哔 %i\\n&quot;</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//     printf(&quot;count = %i\\n&quot;, count);</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">// 如果需要使用初始化表达式的值, 也可以将初始化表达式写到外面</span>
<span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> count <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> count<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;发射子弹~哔哔哔哔\\n&quot;</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;count = %i\\n&quot;</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,42),o=[p];function i(l,c){return s(),a("div",null,o)}const r=n(e,[["render",i],["__file","03.html.vue"]]);export{r as default};
