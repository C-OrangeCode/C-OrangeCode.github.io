import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as l,d as i,w as p,e as s,a as n,b as a}from"./app-a1fbcbb6.js";const r={},u=s(`<h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍" aria-hidden="true">#</a> 介绍</h2><p>WebSocket 是一种在 Web 应用程序中实现双向通信的协议。它允许客户端和服务器之间建立持久的连接，以便双方可以实时地交换数据。相比传统的 HTTP 请求-响应模式，WebSocket 提供了更高效、更实时的通信机制。</p><h3 id="优点" tabindex="-1"><a class="header-anchor" href="#优点" aria-hidden="true">#</a> 优点</h3><ol><li><p><strong>双向通信</strong>：WebSocket 允许客户端和服务器之间双向实时通信，而不需要不断地发起新的 HTTP 请求。</p></li><li><p><strong>低延迟</strong>：由于建立了持久的连接，WebSocket 可以实现更低的通信延迟，适用于实时性要求较高的应用场景。</p></li><li><p><strong>更少的通信开销</strong>：WebSocket 使用更少的通信开销，因为不需要在每次通信中携带大量的 HTTP 头信息。</p></li><li><p><strong>支持跨域通信</strong>：WebSocket 支持跨域通信，可以在不同域名的服务器之间进行通信。</p></li></ol><h3 id="使用场景" tabindex="-1"><a class="header-anchor" href="#使用场景" aria-hidden="true">#</a> 使用场景</h3><ol><li><p><strong>实时聊天</strong>：WebSocket 可以用于实现实时的在线聊天功能。</p></li><li><p><strong>实时协作</strong>：例如在线协作编辑、实时协作绘图等应用场景。</p></li><li><p><strong>实时数据更新</strong>：例如股票行情、实时监控等需要实时更新数据的场景。</p></li></ol><h2 id="ajax-和-websocket-对比" tabindex="-1"><a class="header-anchor" href="#ajax-和-websocket-对比" aria-hidden="true">#</a> AJAX 和 WebSocket 对比</h2><ul><li>WebSocket 是 HTML5 开始提供的一种在单个 TCP 连接上进行全双工通讯的协议。</li><li>WebSocket 使得客户端和服务器之间的数据交换变得更加简单，允许服务端主动向客户端推送数据。在 WebSocket API 中，浏览器和服务器只需要完成一次握手，两者之间就直接可以创建持久性的连接，并进行双向数据传输。</li><li>在 WebSocket API 中，浏览器和服务器只需要做一个握手的动作，然后，浏览器和服务器之间就形成了一条快速通道。两者之间就直接可以数据互相传送。</li><li>现在，很多网站为了实现推送技术，所用的技术都是 Ajax 轮询。轮询是在特定的的时间间隔（如每 1 秒），由浏览器对服务器发出 HTTP 请求，然后由服务器返回最新的数据给客户端的浏览器。这种传统的模式带来很明显的缺点，即浏览器需要不断的向服务器发出请求，然而 HTTP 请求可能包含较长的头部，其中真正有效的数据可能只是很小的一部分，显然这样会浪费很多的带宽等资源。</li><li>HTML5 定义的 WebSocket 协议，能更好的节省服务器资源和带宽，并且能够更实时地进行通讯。</li></ul><p><img src="https://www.runoob.com/wp-content/uploads/2016/03/ws.png" alt="AJAX 和 WebSocket" loading="lazy"><br> 浏览器通过 JavaScript 向服务器发出建立 WebSocket 连接的请求，连接建立以后，客户端和服务器端就可以通过 TCP 连接直接交换数据。</p><p>当你获取 Web Socket 连接后，你可以通过 send() 方法来向服务器发送数据，并通过 onmessage 事件来接收服务器返回的数据。</p><p>以下 API 用于创建 WebSocket 对象。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> Socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">[</span>protocol<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="hint-container note"><p class="hint-container-title">注</p><p>以上代码中的第一个参数 url, 指定连接的 URL。第二个参数 protocol 是可选的，指定了可接受的子协议。</p></div><h2 id="属性" tabindex="-1"><a class="header-anchor" href="#属性" aria-hidden="true">#</a> 属性</h2><p>以下是 WebSocket 对象的属性。假定我们使用了以上代码创建了 Socket 对象：</p><h3 id="socket-readystate" tabindex="-1"><a class="header-anchor" href="#socket-readystate" aria-hidden="true">#</a> Socket.readyState</h3><p>只读属性 readyState 表示连接状态，可以是以下值：</p><ul><li><p><code>0</code> - 表示连接尚未建立。</p></li><li><p><code>1</code> - 表示连接已建立，可以进行通信。</p></li><li><p><code>2</code> - 表示连接正在进行关闭。</p></li><li><p><code>3</code> - 表示连接已经关闭或者连接不能打开。</p></li></ul><h3 id="socket-bufferedamount" tabindex="-1"><a class="header-anchor" href="#socket-bufferedamount" aria-hidden="true">#</a> Socket.bufferedAmount</h3><p>只读属性 bufferedAmount 已被 send() 放入正在队列中等待传输，但是还没有发出的 UTF-8 文本字节数。</p><h2 id="事件" tabindex="-1"><a class="header-anchor" href="#事件" aria-hidden="true">#</a> 事件</h2><p>以下是 WebSocket 对象的相关事件。假定我们使用了以上代码创建了 Socket 对象：</p><table><thead><tr><th>事件</th><th>事件处理程序</th><th>描述</th></tr></thead><tbody><tr><td>open</td><td>Socket.onopen</td><td>连接建立时触发</td></tr><tr><td>message</td><td>Socket.onmessage</td><td>客户端接收服务端数据时触发</td></tr><tr><td>error</td><td>Socket.onerror</td><td>通信发生错误时触发</td></tr><tr><td>close</td><td>Socket.onclose</td><td>连接关闭时触发</td></tr></tbody></table><h2 id="方法" tabindex="-1"><a class="header-anchor" href="#方法" aria-hidden="true">#</a> 方法</h2><p>以下是 WebSocket 对象的相关方法。假定我们使用了以上代码创建了 Socket 对象：</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>Socket.send()</td><td>使用连接发送数据</td></tr><tr><td>Socket.close()</td><td>关闭连接</td></tr></tbody></table><h2 id="实例" tabindex="-1"><a class="header-anchor" href="#实例" aria-hidden="true">#</a> 实例</h2><p>WebSocket 协议本质上是一个基于 TCP 的协议。</p><p>为了建立一个 WebSocket 连接，客户端浏览器首先要向服务器发起一个 HTTP 请求，这个请求和通常的 HTTP 请求不同，包含了一些附加头信息，其中附加头信息&quot;Upgrade: WebSocket&quot;表明这是一个申请协议升级的 HTTP 请求，服务器端解析这些附加的头信息然后产生应答信息返回给客户端，客户端和服务器端的 WebSocket 连接就建立起来了，双方就可以通过这个连接通道自由的传递信息，并且这个连接会持续存在直到客户端或者服务器端的某一方主动的关闭连接。</p><h3 id="客户端的-html-和-javascript" tabindex="-1"><a class="header-anchor" href="#客户端的-html-和-javascript" aria-hidden="true">#</a> 客户端的 HTML 和 JavaScript</h3><p>目前大部分浏览器支持 WebSocket() 接口，你可以在以下浏览器中尝试实例： Chrome, Mozilla, Opera 和 Safari。</p><p>demo-websocket.html 文件内容</p>`,32),d=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"function"),a(),n("span",{class:"token function"},"WebSocketTest"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},"{"),a(`
  `),n("span",{class:"token keyword"},"if"),a(),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"WebSocket"'),a(),n("span",{class:"token keyword"},"in"),a(" window"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},"{"),a(`
    `),n("span",{class:"token function"},"alert"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"您的浏览器支持 WebSocket!"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),a(`

    `),n("span",{class:"token comment"},"// 打开一个 web socket"),a(`
    `),n("span",{class:"token keyword"},"var"),a(" ws "),n("span",{class:"token operator"},"="),a(),n("span",{class:"token keyword"},"new"),a(),n("span",{class:"token class-name"},"WebSocket"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"ws://example.com:80/some/path"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),a(`
    ws`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function-variable function"},"onopen"),a(),n("span",{class:"token operator"},"="),a(),n("span",{class:"token keyword"},"function"),a(),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},"{"),a(`
      `),n("span",{class:"token comment"},"// Web Socket 已连接上，使用 send() 方法发送数据"),a(`
      ws`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"send"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"发送数据"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),a(`
      `),n("span",{class:"token function"},"alert"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"数据发送中..."'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),a(`
    `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),a(`
    ws`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function-variable function"},"onmessage"),a(),n("span",{class:"token operator"},"="),a(),n("span",{class:"token keyword"},"function"),a(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"evt"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},"{"),a(`
      `),n("span",{class:"token keyword"},"var"),a(" received_msg "),n("span",{class:"token operator"},"="),a(" evt"),n("span",{class:"token punctuation"},"."),a("data"),n("span",{class:"token punctuation"},";"),a(`
      `),n("span",{class:"token function"},"alert"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"数据已接收..."'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),a(`
    `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),a(`
    ws`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function-variable function"},"onclose"),a(),n("span",{class:"token operator"},"="),a(),n("span",{class:"token keyword"},"function"),a(),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},"{"),a(`
      `),n("span",{class:"token comment"},"// 关闭 websocket"),a(`
      `),n("span",{class:"token function"},"alert"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"连接已关闭..."'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),a(`
    `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),a(`
  `),n("span",{class:"token punctuation"},"}"),a(),n("span",{class:"token keyword"},"else"),a(),n("span",{class:"token punctuation"},"{"),a(`
    `),n("span",{class:"token comment"},"// 浏览器不支持 WebSocket"),a(`
    `),n("span",{class:"token function"},"alert"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"您的浏览器不支持 WebSocket!"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),a(`
  `),n("span",{class:"token punctuation"},"}"),a(`
`),n("span",{class:"token punctuation"},"}"),a(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),k=n("div",{class:"language-html line-numbers-mode","data-ext":"html"},[n("pre",{class:"language-html"},[n("code",null,[n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),a("div")]),a(),n("span",{class:"token attr-name"},"id"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),a("sse"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),a(`
  `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),a("a")]),a(),n("span",{class:"token attr-name"},"href"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),a("javascript:WebSocketTest()"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),a("运行 WebSocket"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),a("a")]),n("span",{class:"token punctuation"},">")]),a(`
`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),a("div")]),n("span",{class:"token punctuation"},">")]),a(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),b=s(`<h2 id="安装-pywebsocket" tabindex="-1"><a class="header-anchor" href="#安装-pywebsocket" aria-hidden="true">#</a> 安装 pywebsocket</h2><p>在执行以上程序前，我们需要创建一个支持 WebSocket 的服务。从 pywebsocket 下载 mod_pywebsocket ,或者使用 git 命令下载：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> clone https://github.com/googlearchive/pywebsocket
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>mod_pywebsocket 需要 python 环境支持<br> mod_pywebsocket 是一个 Apache HTTP 的 Web Socket 扩展，安装步骤如下：</p><ol><li>解压下载的文件。</li><li>进入 <b>pywebsocket</b> 目录。</li><li>执行命令：</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>python setup.py build
<span class="token function">sudo</span> python setup.py <span class="token function">install</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>查看文档说明:</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pydoc mod_pywebsocket
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="开启服务" tabindex="-1"><a class="header-anchor" href="#开启服务" aria-hidden="true">#</a> 开启服务</h3><p>在 pywebsocket/mod_pywebsocket 目录下执行以下命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> python standalone.py <span class="token parameter variable">-p</span> <span class="token number">9998</span> <span class="token parameter variable">-w</span> <span class="token punctuation">..</span>/example/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>以上命令会开启一个端口号为 9998 的服务，使用 <code>-w</code> 来设置处理程序 echo_wsh.py 所在的目录。</p><p>现在我们可以在 Chrome 浏览器打开前面创建的 demo-websocket.html 文件。如果你的浏览器支持 WebSocket(), 点击&quot;运行 WebSocket&quot;，你就可以看到整个流程各个步骤弹出的窗口</p><p>在我们停止服务后，会弹出 &quot;连接已关闭...&quot;。</p>`,14);function h(m,v){const e=o("CodeDemo");return c(),l("div",null,[u,i(e,{id:"code-demo-257",type:"normal",title:"%E5%AE%9E%E4%BE%8B",code:"eJx9k99LG0EQx/+V6T4plLs+ljT2n2ihLwtlvZuYa+/2wu32riABLS20JdaWRkUfBB/EIPgDRY2g5J+5W+OT/4JzuSSXiAoLBzff+X5mZ2YX2ScRC+VEXkOzCqt9kY72QgkfcP5d6HxG/R6VnpmFRS4BvBrMcDYOcQaehMSTbpgMFQDCx0iTynzr3Gx9N2er/b2f2WbHtI9Ma7m0fcHZ7BsuixzbBvPrf3a1lHbp7EOC86AKxCAeiwgSBXMgMSktCJKoim3jVxE0fLScMKi8fmWrMEC7IXS9IOT5ibJCGTZQksX4hqNLDQsgWyh8Ibs46fe2zZ/dtPv77qqVXvdu2h1QKF3KMeuX5nQtW/13u7Rs1o7NyuHIhCgDDWdT0XEVE70ZRApV2j2wLKtUNSdrDlApsYBTZWOsJyrPWxOhg16M7sdALZCUBJYrtHgKe3FCVzPt86exjh+qaeh0r7Ifp7cbB/mYJqdUgoruEagQPgJqAvqEGJrm8x8tStpdebgrzy7WI/rhbhGFSzrsJavrwKftrrpeDJ47x5lSyNnbXFMVUI+wRv/Kh1B5sP0k7ff+9ndaJaNqC0qv2uRIX9a8B5JpTEM="},{default:p(()=>[d,k]),_:1}),b])}const f=t(r,[["render",h],["__file","15.html.vue"]]);export{f as default};
