import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e as t}from"./app-a1fbcbb6.js";const p={},e=t(`<h2 id="文件的打开和关闭" tabindex="-1"><a class="header-anchor" href="#文件的打开和关闭" aria-hidden="true">#</a> 文件的打开和关闭</h2><ul><li>FILE 结构体</li></ul><ul><li>FILE 结构体是对缓冲区和文件读写状态的记录者，所有对文件的操作，都是通过 FILE 结构体完成的。</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>  <span class="token keyword">struct</span> <span class="token class-name">_iobuf</span> <span class="token punctuation">{</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>_ptr<span class="token punctuation">;</span>  <span class="token comment">//文件输入的下一个位置</span>
    <span class="token keyword">int</span> _cnt<span class="token punctuation">;</span>  <span class="token comment">//当前缓冲区的相对位置</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>_base<span class="token punctuation">;</span> <span class="token comment">//文件的起始位置)</span>
    <span class="token keyword">int</span> _flag<span class="token punctuation">;</span> <span class="token comment">//文件标志</span>
    <span class="token keyword">int</span> _file<span class="token punctuation">;</span>  <span class="token comment">//文件的有效性验证</span>
    <span class="token keyword">int</span> _charbuf<span class="token punctuation">;</span> <span class="token comment">//检查缓冲区状况,如果无缓冲区则不读取</span>
    <span class="token keyword">int</span> _bufsiz<span class="token punctuation">;</span> <span class="token comment">// 缓冲区大小</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>_tmpfname<span class="token punctuation">;</span> <span class="token comment">//临时文件名</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">_iobuf</span> FILE<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><ul><li>fileopen 函数</li></ul><table><thead><tr><th>函数声明</th><th>FILE _ fopen ( const char _ filename, const char * mode );</th></tr></thead><tbody><tr><td>所在文件</td><td>stdio.h</td></tr><tr><td>函数功能</td><td>以 mode 的方式，打开一个 filename 命名的文件，返回一个指向该文件缓冲的 FILE 结构体指针。</td></tr></tbody></table><p>|参数及返回解析<br> |参数| char<em>filaname :要打开，或是创建文件的路径。|<br> |参数| char</em>mode :打开文件的方式。|<br> |返回值| FILE* 返回指向文件缓冲区的指针，该指针是后序操作文件的句柄。|</p><table><thead><tr><th>mode</th><th>处理方式</th><th>当文件不存在时</th><th>当文件存在时</th><th>向文件输入</th><th>从文件输出</th></tr></thead><tbody><tr><td>r</td><td>读取</td><td>出错</td><td>打开文件</td><td>不能</td><td>可以</td></tr><tr><td>w</td><td>写入</td><td>建立新文件</td><td>覆盖原有文件</td><td>可以</td><td>不能</td></tr><tr><td>a</td><td>追加</td><td>建立新文件</td><td>在原有文件后追加</td><td>可以</td><td>不能</td></tr><tr><td>r+</td><td>读取/写入</td><td>出错</td><td>打开文件</td><td>可以</td><td>可以</td></tr><tr><td>w+</td><td>写入/读取</td><td>建立新文件</td><td>覆盖原有文件</td><td>可以</td><td>可以</td></tr><tr><td>a+</td><td>读取/追加</td><td>建立新文件</td><td>在原有文件后追加</td><td>可以</td><td>可以</td></tr></tbody></table><blockquote><p>注意点:</p><ul><li>Windows 如果读写的是二进制文件，则还要加 b,比如 rb, r+b 等。 unix/linux 不区分文本和二进制文件</li></ul></blockquote><hr><ul><li>fclose 函数</li></ul><table><thead><tr><th>函数声明</th><th>int fclose ( FILE * stream );</th></tr></thead><tbody><tr><td>所在文件</td><td>stdio.h</td></tr><tr><td>函数功能</td><td>fclose()用来关闭先前 fopen()打开的文件.</td></tr><tr><td>函数功能</td><td>此动作会让缓冲区内的数据写入文件中, 并释放系统所提供的文件资源</td></tr><tr><td>参数及返回解析</td><td></td></tr><tr><td>参数</td><td>FILE* stream :指向文件缓冲的指针。</td></tr><tr><td>返回值</td><td>int 成功返回 0 ，失败返回 EOF(-1)。</td></tr></tbody></table><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    FILE <span class="token operator">*</span>fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">&quot;test.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;w+&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>--</p><h2 id="一次读写一个字符" tabindex="-1"><a class="header-anchor" href="#一次读写一个字符" aria-hidden="true">#</a> 一次读写一个字符</h2><ul><li>写入</li></ul><table><thead><tr><th>函数声明</th><th>int fputc (int ch, FILE * stream );</th></tr></thead><tbody><tr><td>所在文件</td><td>stdio.h</td></tr><tr><td>函数功能</td><td>将 ch 字符，写入文件。</td></tr><tr><td>参数及返回解析</td><td></td></tr><tr><td>参数</td><td>FILE* stream :指向文件缓冲的指针。</td></tr><tr><td>参数</td><td>int : 需要写入的字符。</td></tr><tr><td>返回值</td><td>int 写入成功，返回写入成功字符，如果失败，返回 EOF。</td></tr></tbody></table><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 1.打开一个文件</span>
    FILE <span class="token operator">*</span>fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">&quot;test.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;w+&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 2.往文件中写入内容</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">char</span> ch <span class="token operator">=</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">;</span> ch <span class="token operator">&lt;=</span> <span class="token char">&#39;z&#39;</span><span class="token punctuation">;</span> ch<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">// 一次写入一个字符</span>
        <span class="token keyword">char</span> res <span class="token operator">=</span> <span class="token function">fputc</span><span class="token punctuation">(</span>ch<span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;res = %c\\n&quot;</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 3.关闭打开的文件</span>
    <span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>读取</li></ul><table><thead><tr><th>函数声明</th><th>int fgetc ( FILE * stream );</th></tr></thead><tbody><tr><td>所在文件</td><td>stdio.h</td></tr><tr><td>函数功能</td><td>从文件流中读取一个字符并返回。</td></tr><tr><td>参数及返回解析</td><td></td></tr><tr><td>参数</td><td>FILE* stream :指向文件缓冲的指针。</td></tr><tr><td>返回值</td><td>int 正常，返回读取的字符；读到文件尾或出错时，为 EOF。</td></tr></tbody></table><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 1.打开一个文件</span>
    FILE <span class="token operator">*</span>fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">&quot;test.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;r+&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 2.从文件中读取内容</span>
    <span class="token keyword">char</span> res <span class="token operator">=</span> <span class="token constant">EOF</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res <span class="token operator">=</span> <span class="token function">fgetc</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">EOF</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;res = %c\\n&quot;</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 3.关闭打开的文件</span>
    <span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>判断文件末尾 <ul><li>feof 函数</li></ul></li></ul><table><thead><tr><th>函数声明</th><th>int feof( FILE * stream );</th></tr></thead><tbody><tr><td>所在文件</td><td>stdio.h</td></tr><tr><td>函数功能</td><td>判断文件是否读到文件结尾</td></tr><tr><td>参数及返回解析</td><td></td></tr><tr><td>参数</td><td>FILE* stream :指向文件缓冲的指针。</td></tr><tr><td>返回值</td><td>int 0 未读到文件结尾，非零 读到文件结尾。</td></tr></tbody></table><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 1.打开一个文件</span>
    FILE <span class="token operator">*</span>fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">&quot;test.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;r+&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 2.从文件中读取内容</span>
    <span class="token keyword">char</span> res <span class="token operator">=</span> <span class="token constant">EOF</span><span class="token punctuation">;</span>
    <span class="token comment">// 注意: 由于只有先读了才会修改标志位,</span>
    <span class="token comment">// 所以通过feof判断是否到达文件末尾, 一定要先读再判断, 不能先判断再读</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res <span class="token operator">=</span> <span class="token function">fgetc</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">feof</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;res = %c\\n&quot;</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 3.关闭打开的文件</span>
    <span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><ul><li>注意点:</li><li>feof 这个函数，是去读标志位判断文件是否结束的。</li><li>而标志位只有读完了才会被修改, 所以如果先判断再读标志位会出现多打一次的的现象</li><li>所以企业开发中使用 feof 函数一定要先读后判断, 而不能先判断后读</li></ul></blockquote><ul><li>作业</li></ul><ul><li>实现文件的简单加密和解密</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>
<span class="token keyword">void</span> <span class="token function">encode</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>newName<span class="token punctuation">,</span> <span class="token keyword">int</span> code<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">decode</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>newName<span class="token punctuation">,</span> <span class="token keyword">int</span> code<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">&quot;main.c&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;encode.c&quot;</span><span class="token punctuation">,</span> <span class="token number">666</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">decode</span><span class="token punctuation">(</span><span class="token string">&quot;encode.c&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;decode.c&quot;</span><span class="token punctuation">,</span> <span class="token number">666</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/**
 * @brief encode 加密文件
 * @param name 需要加密的文件名称
 * @param newName 加密之后的文件名称
 * @param code 秘钥
 */</span>
<span class="token keyword">void</span> <span class="token function">encode</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>newName<span class="token punctuation">,</span> <span class="token keyword">int</span> code<span class="token punctuation">)</span><span class="token punctuation">{</span>
    FILE <span class="token operator">*</span>fw <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>newName<span class="token punctuation">,</span> <span class="token string">&quot;w+&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    FILE <span class="token operator">*</span>fr <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token string">&quot;r+&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> ch <span class="token operator">=</span> <span class="token constant">EOF</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ch <span class="token operator">=</span> <span class="token function">fgetc</span><span class="token punctuation">(</span>fr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">feof</span><span class="token punctuation">(</span>fr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">fputc</span><span class="token punctuation">(</span>ch <span class="token operator">^</span> code<span class="token punctuation">,</span> fw<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">fclose</span><span class="token punctuation">(</span>fw<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fclose</span><span class="token punctuation">(</span>fr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/**
 * @brief encode 解密文件
 * @param name 需要解密的文件名称
 * @param newName 解密之后的文件名称
 * @param code 秘钥
 */</span>
<span class="token keyword">void</span> <span class="token function">decode</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>newName<span class="token punctuation">,</span> <span class="token keyword">int</span> code<span class="token punctuation">)</span><span class="token punctuation">{</span>
    FILE <span class="token operator">*</span>fw <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>newName<span class="token punctuation">,</span> <span class="token string">&quot;w+&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    FILE <span class="token operator">*</span>fr <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token string">&quot;r+&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> ch <span class="token operator">=</span> <span class="token constant">EOF</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ch <span class="token operator">=</span> <span class="token function">fgetc</span><span class="token punctuation">(</span>fr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">feof</span><span class="token punctuation">(</span>fr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">fputc</span><span class="token punctuation">(</span>ch <span class="token operator">^</span> code<span class="token punctuation">,</span> fw<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">fclose</span><span class="token punctuation">(</span>fw<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fclose</span><span class="token punctuation">(</span>fr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="一次读写一行字符" tabindex="-1"><a class="header-anchor" href="#一次读写一行字符" aria-hidden="true">#</a> 一次读写一行字符</h2><ul><li>什么是行</li></ul><ul><li>行是文本编辑器中的概念，文件流中就是一个字符。这个在不同的平台是有差异的。window 平台 &#39;\\r\\n&#39;，linux 平台是&#39;\\n&#39;</li></ul><ul><li>平台差异</li></ul><ul><li>windows 平台在写入&#39;\\n&#39;是会体现为&#39;\\r\\n&#39;，linux 平台在写入&#39;\\n&#39;时会体现为&#39;\\n&#39;。windows 平台在读入&#39;\\r\\n&#39;时，体现为一个字符&#39;\\n&#39;，linux 平台在读入&#39;\\n&#39;时，体现为一个字符&#39;\\n&#39;</li><li>linux 读 windows 中的换行，则会多读一个字符，windows 读 linux 中的换行，则没有问题</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    FILE <span class="token operator">*</span>fw <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">&quot;test.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;w+&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fputc</span><span class="token punctuation">(</span><span class="token char">&#39;a&#39;</span><span class="token punctuation">,</span> fw<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fputc</span><span class="token punctuation">(</span><span class="token char">&#39;\\n&#39;</span><span class="token punctuation">,</span> fw<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fputc</span><span class="token punctuation">(</span><span class="token char">&#39;b&#39;</span><span class="token punctuation">,</span> fw<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fclose</span><span class="token punctuation">(</span>fw<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://img-blog.csdnimg.cn/img_convert/1d80c69a41198813f0bb19cef89b74ea.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><hr><ul><li>写入一行</li></ul><table><thead><tr><th>函数声明</th><th>int fputs(char *str,FILE *fp)</th></tr></thead><tbody><tr><td>所在文件</td><td>stdio.h</td></tr><tr><td>函数功能</td><td>把 str 指向的字符串写入 fp 指向的文件中。</td></tr><tr><td>参数及返回解析</td><td></td></tr><tr><td>参数</td><td>char * str : 表示指向的字符串的指针。</td></tr><tr><td>参数</td><td>FILE *fp : 指向文件流结构的指针。</td></tr><tr><td>返回值</td><td>int 正常，返 0；出错返 EOF。</td></tr></tbody></table><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    FILE <span class="token operator">*</span>fw <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">&quot;test.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;w+&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 注意: fputs不会自动添加\\n</span>
    <span class="token function">fputs</span><span class="token punctuation">(</span><span class="token string">&quot;lnj\\n&quot;</span><span class="token punctuation">,</span> fw<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fputs</span><span class="token punctuation">(</span><span class="token string">&quot;it666\\n&quot;</span><span class="token punctuation">,</span> fw<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fclose</span><span class="token punctuation">(</span>fw<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>遇到\\0 自动终止写入</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    FILE <span class="token operator">*</span>fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">&quot;test.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;w+&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 注意: fputs写入时遇到\\0就会自动终止写入</span>
    <span class="token function">fputs</span><span class="token punctuation">(</span><span class="token string">&quot;lnj\\0it666\\n&quot;</span><span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><ul><li>读取一行</li></ul><table><thead><tr><th>函数声明</th><th>char *fgets(char *str,int length,FILE *fp)</th></tr></thead><tbody><tr><td>所在文件</td><td>stdio.h</td></tr><tr><td>函数功能</td><td>从 fp 所指向的文件中，至多读 length-1 个字符，送入字符数组 str 中， 如果在读入 length-1 个字符结束前遇\\n 或 EOF，读入即结束，字符串读入后在最后加一个‘\\0’字符。</td></tr><tr><td>参数及返回解析</td><td></td></tr><tr><td>参数</td><td>char * str :指向需要读入数据的缓冲区。</td></tr><tr><td>参数</td><td>int length :每一次读数字符的字数。</td></tr><tr><td>参数</td><td>FILE* fp :文件流指针。</td></tr><tr><td>返回值</td><td>char * 正常，返 str 指针；出错或遇到文件结尾 返空指针 NULL。</td></tr></tbody></table><ul><li>最多只能读取 N-1 个字符</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    FILE <span class="token operator">*</span>fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">&quot;test.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;w+&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 注意: fputs不会自动添加\\n</span>
    <span class="token function">fputs</span><span class="token punctuation">(</span><span class="token string">&quot;it666\\n&quot;</span><span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 将FILE结构体中的读写指针重新移动到最前面</span>
    <span class="token comment">// 注意: FILE结构体中读写指针每读或写一个字符后都会往后移动</span>
    <span class="token function">rewind</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">// 从fp中读取4个字符, 存入到str中</span>
    <span class="token comment">// 最多只能读取N-1个字符, 会在最后自动添加\\0</span>
    <span class="token function">fgets</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;str = %s&quot;</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// it6</span>
    <span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>遇到\\n 自动结束</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    FILE <span class="token operator">*</span>fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">&quot;test.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;w+&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 注意: fputs不会自动添加\\n</span>
    <span class="token function">fputs</span><span class="token punctuation">(</span><span class="token string">&quot;lnj\\n&quot;</span><span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fputs</span><span class="token punctuation">(</span><span class="token string">&quot;it666\\n&quot;</span><span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 将FILE结构体中的读写指针重新移动到最前面</span>
    <span class="token comment">// 注意: FILE结构体中读写指针每读或写一个字符后都会往后移动</span>
    <span class="token function">rewind</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">// 从fp中读取1024个字符, 存入到str中</span>
    <span class="token comment">// 但是读到第4个就是\\n了, 函数会自动停止读取</span>
    <span class="token comment">// 注意点: \\n会被读取进来</span>
    <span class="token function">fgets</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;str = %s&quot;</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// lnj</span>
    <span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>读取到 EOF 自动结束</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    FILE <span class="token operator">*</span>fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">&quot;test.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;w+&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 注意: fputs不会自动添加\\n</span>
    <span class="token function">fputs</span><span class="token punctuation">(</span><span class="token string">&quot;lnj\\n&quot;</span><span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fputs</span><span class="token punctuation">(</span><span class="token string">&quot;it666&quot;</span><span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 将FILE结构体中的读写指针重新移动到最前面</span>
    <span class="token comment">// 注意: FILE结构体中读写指针每读或写一个字符后都会往后移动</span>
    <span class="token function">rewind</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">// 每次从fp中读取1024个字符, 存入到str中</span>
    <span class="token comment">// 读取到文件末尾自动结束</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">fgets</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;str = %s&quot;</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>注意点: <ul><li>企业开发中能不用 feof 函数就不用 feof 函数</li><li>如果最后一行，没有行‘\\n’的话则少读一行</li></ul></li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    FILE <span class="token operator">*</span>fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">&quot;test.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;w+&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 注意: fputs不会自动添加\\n</span>
    <span class="token function">fputs</span><span class="token punctuation">(</span><span class="token string">&quot;12345678910\\n&quot;</span><span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fputs</span><span class="token punctuation">(</span><span class="token string">&quot;12345678910\\n&quot;</span><span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fputs</span><span class="token punctuation">(</span><span class="token string">&quot;12345678910&quot;</span><span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 将FILE结构体中的读写指针重新移动到最前面</span>
    <span class="token comment">// 注意: FILE结构体中读写指针每读或写一个字符后都会往后移动</span>
    <span class="token function">rewind</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">// 每次从fp中读取1024个字符, 存入到str中</span>
    <span class="token comment">// 读取到文件末尾自动结束</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">fgets</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">,</span> fp<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">feof</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;str = %s&quot;</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>作业: <ul><li>利用 fgets(str, 5, fp)读取下列文本会读取多少次?</li></ul></li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>12345678910
12345
123
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="一次读写一块数据" tabindex="-1"><a class="header-anchor" href="#一次读写一块数据" aria-hidden="true">#</a> 一次读写一块数据</h2><ul><li>C 语言己经从接口的层面区分了，文本的读写方式和二进制的读写方式。前面我们讲的是文本的读写方式。</li><li>所有的文件接口函数，要么以 &#39;\\0&#39;，表示输入结束，要么以 &#39;\\n&#39;， EOF(0xFF)表示读取结束。 &#39;\\0&#39; &#39;\\n&#39; 等都是文本文件的重要标识，而所有的二进制接口对于这些标识，是不敏感的。 +二进制的接口可以读文本，而文本的接口不可以读二进制</li></ul><ul><li>一次写入一块数据</li></ul><table><thead><tr><th>函数声明</th><th>int fwrite(void *buffer, int num_bytes, int count, FILE *fp)</th></tr></thead><tbody><tr><td>所在文件</td><td>stdio.h</td></tr><tr><td>函数功能</td><td>把 buffer 指向的数据写入 fp 指向的文件中</td></tr><tr><td>参数</td><td>char * buffer : 指向要写入数据存储区的首地址的指针</td></tr><tr><td></td><td>int num_bytes: 每个要写的字段的字节数 count</td></tr><tr><td></td><td>int count : 要写的字段的个数</td></tr><tr><td></td><td>FILE* fp : 要写的文件指针</td></tr><tr><td>返回值</td><td>int 成功，返回写的字段数；出错或文件结束，返回 0。</td></tr></tbody></table><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    FILE <span class="token operator">*</span>fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">&quot;test.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;wb+&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 注意: fwrite不会关心写入数据的格式</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>str <span class="token operator">=</span> <span class="token string">&quot;lnj\\0it666&quot;</span><span class="token punctuation">;</span>
     <span class="token comment">/*
     * 第一个参数: 被写入数据指针
     * 第二个参数: 每次写入多少个字节
     * 第三个参数: 需要写入多少次
     * 第四个参数: 已打开文件结构体指针
     */</span>
    <span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>str<span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>一次读取一块数据</li></ul><table><thead><tr><th>函数声明</th><th>int fread(void *buffer, int num_bytes, int count, FILE *fp)</th></tr></thead><tbody><tr><td>所在文件</td><td>stdio.h</td></tr><tr><td>函数功能</td><td>把 fp 指向的文件中的数据读到 buffer 中。</td></tr><tr><td>参数</td><td>char * buffer : 指向要读入数据存储区的首地址的指针</td></tr><tr><td></td><td>int num_bytes: 每个要读的字段的字节数 count</td></tr><tr><td></td><td>int count : 要读的字段的个数</td></tr><tr><td></td><td>FILE* fp : 要读的文件指针</td></tr><tr><td>返回值</td><td>int 成功，返回读的字段数；出错或文件结束，返回 0。</td></tr></tbody></table><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// test.txt中存放的是&quot;lnj\\0it666&quot;</span>
    FILE <span class="token operator">*</span>fr <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">&quot;test.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;rb+&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token comment">// fread函数读取成功返回读取到的字节数, 读取失败返回0</span>
    <span class="token comment">/*
     * 第一个参数: 存储读取到数据的容器
     * 第二个参数: 每次读取多少个字节
     * 第三个参数: 需要读取多少次
     * 第四个参数: 已打开文件结构体指针
     */</span>
    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token function">fread</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">,</span> fr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%i\\n&quot;</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%c&quot;</span><span class="token punctuation">,</span> buf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">fclose</span><span class="token punctuation">(</span>fr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><ul><li>注意点:</li><li>读取时 num_bytes 应该填写读取数据类型的最小单位, 而 count 可以随意写</li><li>如果读取时 num_bytes 不是读取数据类型最小单位, 会引发读取失败</li><li>例如: 存储的是 char 类型 6C 6E 6A 00 69 74 36 36 36<br> 如果 num_bytes 等于 1, count 等于 1024, 那么依次取出 6C 6E 6A 00 69 74 36 36 36 , 直到取不到为止<br> 如果 num_bytes 等于 4, count 等于 1024, 那么依次取出[6C 6E 6A 00][69 74 36 36] , 但是最后还剩下一个 36, 但又不满足 4 个字节, 那么最后一个 36 则取不到</li></ul></blockquote><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>

    <span class="token comment">// test.txt中存放的是&quot;lnj\\0it666&quot;</span>
    FILE <span class="token operator">*</span>fr <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">&quot;test.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;rb+&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token comment">/*
    while(fread(buf, 4, 1, fr) &gt; 0){
        printf(&quot;%c\\n&quot;, buf[0]);
        printf(&quot;%c\\n&quot;, buf[1]);
        printf(&quot;%c\\n&quot;, buf[2]);
        printf(&quot;%c\\n&quot;, buf[3]);
    }
    */</span>
    <span class="token comment">/*
    while(fread(buf, 1, 4, fr) &gt; 0){
        printf(&quot;%c\\n&quot;, buf[0]);
        printf(&quot;%c\\n&quot;, buf[1]);
        printf(&quot;%c\\n&quot;, buf[2]);
        printf(&quot;%c\\n&quot;, buf[3]);
    }
    */</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">fread</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> fr<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%c\\n&quot;</span><span class="token punctuation">,</span> buf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">fclose</span><span class="token punctuation">(</span>fr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><ul><li>注意: fwrite 和 fread 本质是用来操作二进制的</li><li>所以下面用法才是它们的正确打开姿势</li></ul></blockquote><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>

    FILE <span class="token operator">*</span>fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">&quot;test.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;wb+&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> ages<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token function">fwrite</span><span class="token punctuation">(</span>ages<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ages<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">rewind</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> data<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">fread</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>data<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> fp<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;data = %i\\n&quot;</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="" tabindex="-1"><a class="header-anchor" href="#" aria-hidden="true">#</a></h2>`,70),c=[e];function o(i,l){return s(),a("div",null,c)}const r=n(p,[["render",o],["__file","50.html.vue"]]);export{r as default};
