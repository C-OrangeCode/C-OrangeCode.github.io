import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as s,e}from"./app-a1fbcbb6.js";const p={},t=e(`<h2 id="数组指针的概念及定义" tabindex="-1"><a class="header-anchor" href="#数组指针的概念及定义" aria-hidden="true">#</a> 数组指针的概念及定义</h2><ul><li>数组元素指针</li></ul><ul><li>一个变量有地址,一个数组包含若干元素,每个数组元素也有相应的地址, 指针变量也可以保存数组元素的地址</li><li>只要一个指针变量保存了数组元素的地址, 我们就称之为数组元素指针<br><img src="https://img-blog.csdnimg.cn/img_convert/69b98c6401a04bf8fce52a78c80b9565.png" alt="" loading="lazy"></li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>    <span class="token function">printf</span><span class="token punctuation">(</span>“<span class="token operator">%</span>p <span class="token operator">%</span>p”<span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出结果:0x1100, 0x1100</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><ul><li>注意: 数组名a不代表整个数组,只代表数组首元素的地址。</li><li>“p=a;”的作用是“把a数组的首元素的地址赋给指针变量p”,而不是“把数组a各元素的值赋给 p”</li></ul></blockquote><h2 id="" tabindex="-1"><a class="header-anchor" href="#" aria-hidden="true">#</a></h2><h2 id="指针访问数组元素" tabindex="-1"><a class="header-anchor" href="#指针访问数组元素" aria-hidden="true">#</a> 指针访问数组元素</h2><figure><img src="https://img-blog.csdnimg.cn/img_convert/13c0dd997ce619b1249220ce09610ad4.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>    <span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
      <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
      <span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>
      <span class="token comment">// p = &amp;(a[0]); </span>
      p <span class="token operator">=</span> a<span class="token punctuation">;</span>
      <span class="token function">printf</span><span class="token punctuation">(</span>“<span class="token operator">%</span>d <span class="token operator">%</span>d\\n”<span class="token punctuation">,</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出结果: 2, 2</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在指针指向数组元素时,允许以下运算:</li></ul><ul><li>加一个整数(用+或+=),如p+1</li><li>减一个整数(用-或-=),如p-1</li><li>自加运算,如p++,++p</li><li>自减运算,如p--,--p</li></ul><figure><img src="https://img-blog.csdnimg.cn/img_convert/6c563fff4c62724055337604c2d31623.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><ul><li>如果指针变量p已指向数组中的一个元素,则p+1<code>指向</code>同一数组中的下一个元素,p-1<code>指向</code>同 一数组中的上一个元素。</li></ul></blockquote><ul><li>结论: 访问数组元素,可用下面两种方法:</li></ul><ul><li>下标法, 如a[i]形式</li><li>指针法, *(p+i)形式</li></ul><figure><img src="https://img-blog.csdnimg.cn/img_convert/e00312fbc775c04e2a449d7d8d473eb9.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>注意:</li></ul><ul><li>数组名虽然是数组的首地址，但是数组名所所保存的数组的首地址是不可以更改的</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>  <span class="token keyword">int</span> x<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	x<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token comment">//错误</span>
	<span class="token keyword">int</span><span class="token operator">*</span> p <span class="token operator">=</span> x<span class="token punctuation">;</span>
	p<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">//正确</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="-1" tabindex="-1"><a class="header-anchor" href="#-1" aria-hidden="true">#</a></h2>`,20),c=[t];function i(o,l){return a(),s("div",null,c)}const d=n(p,[["render",i],["__file","19.html.vue"]]);export{d as default};
