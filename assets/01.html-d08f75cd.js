import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c,e}from"./app-a1fbcbb6.js";const n={},t=e('<div class="hint-container note"><p class="hint-container-title">注</p><ul><li>默认情况下程序运行后，系统会按书写顺序从上至下依次执行程序中的每一行代码。但是这并不能满足我们所有的开发需求, 为了方便我们控制程序的运行流程，C 语言提供 3 种流程控制结构，不同的流程控制结构可以实现不同的运行流程。</li><li>这 3 种流程结构分别是顺序结构、选择结构、循环结构</li></ul></div><h2 id="顺序结构" tabindex="-1"><a class="header-anchor" href="#顺序结构" aria-hidden="true">#</a> 顺序结构:</h2><ul><li>按书写顺序从上至下依次执行<br><img src="https://img-blog.csdnimg.cn/img_convert/9071191723644a2b0364126c8a5bd65f.png" alt="" loading="lazy"></li></ul><h2 id="选择结构" tabindex="-1"><a class="header-anchor" href="#选择结构" aria-hidden="true">#</a> 选择结构</h2><ul><li>对给定的条件进行判断，再根据判断结果来决定执行代码<br><img src="https://img-blog.csdnimg.cn/img_convert/0e8b2f8b6230aedf754eab312605ce23.png" alt="" loading="lazy"><br><img src="https://img-blog.csdnimg.cn/img_convert/e4452dcd9857466ecc0957fb4453b3a3.png" alt="" loading="lazy"></li></ul><h2 id="循环结构" tabindex="-1"><a class="header-anchor" href="#循环结构" aria-hidden="true">#</a> 循环结构</h2><ul><li>在给定条件成立的情况下，反复执行某一段代码<br><img src="https://img-blog.csdnimg.cn/img_convert/4899d440537583bc28f3bc17bd2b7ae1.png" alt="" loading="lazy"><br><img src="https://img-blog.csdnimg.cn/img_convert/3f74e2788a1ccbaf1028b1360c514c70.png" alt="" loading="lazy"></li></ul><hr>',8),l=[t];function r(d,o){return a(),c("div",null,l)}const h=i(n,[["render",r],["__file","01.html.vue"]]);export{h as default};
