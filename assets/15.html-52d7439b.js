import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as n,c as s,e as t}from"./app-a1fbcbb6.js";const e={},c=t(`<h2 id="char类型内存存储细节" tabindex="-1"><a class="header-anchor" href="#char类型内存存储细节" aria-hidden="true">#</a> char类型内存存储细节</h2><ul><li>char类型基本概念</li></ul><ul><li>char是C语言中比较灵活的一种数据类型，称为“字符型”</li><li>char类型变量占1个字节存储空间，共8位</li><li>除单个字符以外, C语言的的转义字符也可以利用char类型存储</li></ul><table><thead><tr><th>字符</th><th>意义</th></tr></thead><tbody><tr><td>\\b</td><td>退格(BS)当前位置向后回退一个字符</td></tr><tr><td>\\r</td><td>回车(CR),将当前位置移至本行开头</td></tr><tr><td>\\n</td><td>换行(LF),将当前位置移至下一行开头</td></tr><tr><td>\\t</td><td>水平制表(HT),跳到下一个 TAB 位置</td></tr><tr><td>\\0</td><td>用于表示字符串的结束标记</td></tr><tr><td><code>\\</code></td><td>代表一个反斜线字符 \\</td></tr><tr><td>\\&quot;</td><td>代表一个双引号字符&quot;</td></tr><tr><td>\\&#39;</td><td>代表一个单引号字符&#39;</td></tr></tbody></table><ul><li>char型数据存储原理</li></ul><ul><li>计算机只能识别0和1, 所以char类型存储数据并不是存储一个字符, 而是将字符转换为0和1之后再存储</li><li>正是因为存储字符类型时需要将字符转换为0和1, 所以为了统一, 老美就定义了一个叫做ASCII表的东东</li><li>ASCII表中定义了每一个字符对应的整数<br><img src="https://img-blog.csdnimg.cn/img_convert/b519ba9d45ab584c43c991777d8e978a.png" alt="" loading="lazy"></li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>    <span class="token keyword">char</span> ch1 <span class="token operator">=</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">;</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%i\\n&quot;</span><span class="token punctuation">,</span> ch1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 97    char ch2 = 97;    printf(&quot;%c\\n&quot;, ch2); // a</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>char类型注意点</li></ul><ul><li><p>char类型占一个字节, 一个中文字符占3字节(unicode表),所有char不可以存储中文</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token char">&#39;我&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 错误写法</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>除转义字符以外, 不支持多个字符</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">char</span> ch <span class="token operator">=</span> <span class="token char">&#39;ab&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 错误写法</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>char类型存储字符时会先查找对应的ASCII码值, 存储的是ASCII值, 所以字符6和数字6存储的内容不同</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">char</span> ch1 <span class="token operator">=</span> <span class="token char">&#39;6&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 存储的是ASCII码 64char ch2 = 6; //  存储的是数字 6</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><ul><li>练习</li></ul><ul><li>定义一个函数, 实现输入一个小写字母,要求转换成大写输出</li></ul><h2 id="" tabindex="-1"><a class="header-anchor" href="#" aria-hidden="true">#</a></h2>`,12),l=[c];function d(r,i){return n(),s("div",null,l)}const u=a(e,[["render",d],["__file","15.html.vue"]]);export{u as default};
