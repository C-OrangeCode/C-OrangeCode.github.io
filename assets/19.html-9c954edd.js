import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e as t}from"./app-a1fbcbb6.js";const p={},e=t(`<h2 id="运算符基本概念" tabindex="-1"><a class="header-anchor" href="#运算符基本概念" aria-hidden="true">#</a> 运算符基本概念</h2><ul><li><p>和数学中的运算符一样, C语言中的运算符是告诉程序执行特定算术或逻辑操作的符号</p><ul><li>例如告诉程序, 某两个数相加, 相减,相乘等<br><img src="https://img-blog.csdnimg.cn/img_convert/9660218fe17b25a2de09e5438d889037.png" alt="" loading="lazy"></li></ul></li><li><p>什么是表达式</p><ul><li>表达式就是利用运算符链接在一起的有意义,有结果的语句;</li><li>例如: a + b; 就是一个算数表达式, 它的意义是将两个数相加, 两个数相加的结果就是表达式的结果</li><li>注意: 表达式一定要有结果</li></ul></li></ul><hr><h2 id="运算符分类" tabindex="-1"><a class="header-anchor" href="#运算符分类" aria-hidden="true">#</a> 运算符分类</h2><ul><li>按照功能划分: <ul><li>算术运算符</li><li>赋值运算符</li><li>关系运算符</li><li>逻辑运算符</li><li>位运算符</li></ul></li><li>按照参与运算的操作数个数划分: <ul><li>单目运算 <ul><li>只有一个操作数 如 : i++;</li></ul></li><li>双目运算 <ul><li>有两个操作数 如 : a + b;</li></ul></li><li>三目运算 <ul><li>C语言中唯一的一个,也称为问号表达式 如: a&gt;b ? 1 : 0;</li></ul></li></ul></li></ul><hr><h2 id="运算符的优先级和结合性" tabindex="-1"><a class="header-anchor" href="#运算符的优先级和结合性" aria-hidden="true">#</a> 运算符的优先级和结合性</h2><ul><li>早在小学的数学课本中,我们就学习过&quot;从左往右,先乘除后加减,有括号的先算括号里面的&quot;, 这句话就蕴含了优先级和结合性的问题</li><li>C语言中,运算符的运算优先级共分为15 级。1 级最高,15 级最低</li></ul><ul><li>在C语言表达式中,不同优先级的运算符, 运算次序按照由高到低执行</li><li>在C语言表达式中,相同优先级的运算符, 运算次序按照结合性规定的方向执行<br><img src="https://img-blog.csdnimg.cn/img_convert/56c97e103145e96707a17273cebcdf6a.png" alt="" loading="lazy"><img src="https://img-blog.csdnimg.cn/img_convert/89de357c15677f49a7316c497a6d3fc7.png" alt="" loading="lazy"></li></ul><hr><h2 id="算数运算符" tabindex="-1"><a class="header-anchor" href="#算数运算符" aria-hidden="true">#</a> 算数运算符</h2><table><thead><tr><th>优先级</th><th>名称</th><th>符号</th><th>说明</th></tr></thead><tbody><tr><td>3</td><td>乘法运算符</td><td>*</td><td>双目运算符,具有左结合性</td></tr><tr><td>3</td><td>除法运算符</td><td>/</td><td>双目运算符,具有左结合性</td></tr><tr><td>3</td><td>求余运算符 (模运算符)</td><td>%</td><td>双目运算符,具有左结合性</td></tr><tr><td>4</td><td>加法运算符</td><td>+</td><td>双目运算符,具有左结合性</td></tr><tr><td>4</td><td>减法运算符</td><td>-</td><td>双目运算符,具有左结合性</td></tr></tbody></table><ul><li>注意事项 <ul><li>如果参与运算的两个操作数皆为整数, 那么结果也为整数</li><li>如果参与运算的两个操作数其中一个是浮点数, 那么结果一定是浮点数</li><li>求余运算符, 本质上就是数学的商和余&quot;中的余数</li><li>求余运算符, 参与运算的两个操作数必须都是整数, 不能包含浮点数</li><li>求余运算符, 被除数小于除数, 那么结果就是被除数</li><li>求余运算符, 运算结果的正负性取决于被除数,跟除数无关, 被除数是正数结果就是正数,被除数是负数结果就是负数</li><li>求余运算符, 被除数为0, 结果为0</li><li>求余运算符, 除数为0, 没有意义(不要这样写)</li></ul></li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
    <span class="token comment">// 加法</span>
    <span class="token keyword">int</span> result <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%i\\n&quot;</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 15</span>
    <span class="token comment">// 减法</span>
    result <span class="token operator">=</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%i\\n&quot;</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5</span>
    <span class="token comment">// 乘法</span>
    result <span class="token operator">=</span> a <span class="token operator">*</span> b<span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%i\\n&quot;</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 50</span>
    <span class="token comment">// 除法</span>
    result <span class="token operator">=</span> a <span class="token operator">/</span> b<span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%i\\n&quot;</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>
    
    <span class="token comment">// 算术运算符的结合性和优先级</span>
    <span class="token comment">// 结合性: 左结合性, 从左至右</span>
    <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>
    result <span class="token operator">=</span> a <span class="token operator">+</span> b <span class="token operator">+</span> c<span class="token punctuation">;</span> <span class="token comment">// 15 + c;  65;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%i\\n&quot;</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// 优先级: * / % 大于 + -</span>
    result <span class="token operator">=</span> a <span class="token operator">+</span> b <span class="token operator">*</span> c<span class="token punctuation">;</span> <span class="token comment">// a + 250; 260;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%i\\n&quot;</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// 整数除以整数, 结果还是整数</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%i\\n&quot;</span><span class="token punctuation">,</span> <span class="token number">10</span> <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>

    <span class="token comment">// 参与运算的任何一个数是小数, 结果就是小数</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%f\\n&quot;</span><span class="token punctuation">,</span> <span class="token number">10</span> <span class="token operator">/</span> <span class="token number">3.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3.333333</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// 10 / 3 商等于3, 余1</span>
    <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">%</span> <span class="token number">3</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%i\\n&quot;</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>

    <span class="token comment">// 左边小于右边, 那么结果就是左边</span>
    result <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%i\\n&quot;</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>

    <span class="token comment">// 被除数是正数结果就是正数,被除数是负数结果就是负数</span>
    result <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">%</span> <span class="token number">3</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%i\\n&quot;</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
    result <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">10</span> <span class="token operator">%</span> <span class="token number">3</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%i\\n&quot;</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// -1</span>
    result <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">%</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%i\\n&quot;</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="赋值运算符" tabindex="-1"><a class="header-anchor" href="#赋值运算符" aria-hidden="true">#</a> 赋值运算符</h2><table><thead><tr><th>优先级</th><th>名称</th><th>符号</th><th>说明</th></tr></thead><tbody><tr><td>14</td><td>赋值运算符</td><td>=</td><td>双目运算符,具有右结合性</td></tr><tr><td>14</td><td>除后赋值运算符</td><td>/=</td><td>双目运算符,具有右结合性</td></tr><tr><td>14</td><td>乘后赋值运算符 (模运算符)</td><td>*=</td><td>双目运算符,具有右结合性</td></tr><tr><td>14</td><td>取模后赋值运算符</td><td>%=</td><td>双目运算符,具有右结合性</td></tr><tr><td>14</td><td>加后赋值运算符</td><td>+=</td><td>双目运算符,具有右结合性</td></tr><tr><td>14</td><td>减后赋值运算符</td><td>-=</td><td>双目运算符,具有右结合性</td></tr></tbody></table><ul><li>简单赋值运算符</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// 简单的赋值运算符 =</span>
    <span class="token comment">// 会将=右边的值赋值给左边</span>
    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;a = %i\\n&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>复合赋值运算符</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
     <span class="token comment">// 复合赋值运算符 += -= *= /= %=</span>
     <span class="token comment">// 将变量中的值取出之后进行对应的操作, 操作完毕之后再重新赋值给变量</span>
     <span class="token keyword">int</span> num1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
     <span class="token comment">// num1 = num1 + 1; num1 = 10 + 1; num1 = 11;</span>
     num1 <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;num1 = %i\\n&quot;</span><span class="token punctuation">,</span> num1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 11</span>
     <span class="token keyword">int</span> num2 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
     <span class="token comment">// num2 = num2 - 1; num2 = 10 - 1; num2 = 9;</span>
     num2 <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>
     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;num2 = %i\\n&quot;</span><span class="token punctuation">,</span> num2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 9</span>
     <span class="token keyword">int</span> num3 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
     <span class="token comment">// num3 = num3 * 2; num3 = 10 * 2; num3 = 20;</span>
     num3 <span class="token operator">*=</span> <span class="token number">2</span><span class="token punctuation">;</span>
     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;num3 = %i\\n&quot;</span><span class="token punctuation">,</span> num3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 20</span>
     <span class="token keyword">int</span> num4 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
     <span class="token comment">// num4 = num4 / 2; num4 = 10 / 2; num4 = 5;</span>
     num4 <span class="token operator">/=</span> <span class="token number">2</span><span class="token punctuation">;</span>
     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;num4 = %i\\n&quot;</span><span class="token punctuation">,</span> num4<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5</span>
     <span class="token keyword">int</span> num5 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
     <span class="token comment">// num5 = num5 % 3; num5 = 10 % 3; num5 = 1;</span>
     num5 <span class="token operator">%=</span> <span class="token number">3</span><span class="token punctuation">;</span>
     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;num5 = %i\\n&quot;</span><span class="token punctuation">,</span> num5<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>结合性和优先级</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token comment">// 赋值运算符优先级是14, 普通运算符优先级是3和4, 所以先计算普通运算符</span>
    <span class="token comment">// 普通运算符中乘法优先级是3, 加法是4, 所以先计算乘法</span>
    <span class="token comment">// number += 1 + 25; number += 26; number = number + 26; number = 36;</span>
    number <span class="token operator">+=</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">5</span> <span class="token operator">*</span> <span class="token number">5</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;number = %i\\n&quot;</span><span class="token punctuation">,</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 36</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="自增自减运算符" tabindex="-1"><a class="header-anchor" href="#自增自减运算符" aria-hidden="true">#</a> 自增自减运算符</h2><ul><li>在程序设计中,经常遇到“i=i+1”和“i=i-1”这两种极为常用的操作。</li><li>C语言为这种操作提供了两个更为简洁的运算符,即++和--</li></ul><table><thead><tr><th>优先级</th><th>名称</th><th>符号</th><th>说明</th></tr></thead><tbody><tr><td>2</td><td>自增运算符(在后)</td><td>i++</td><td>单目运算符,具有左结合性</td></tr><tr><td>2</td><td>自增运算符(在前)</td><td>++i</td><td>单目运算符,具有右结合性</td></tr><tr><td>2</td><td>自减运算符(在后)</td><td>i--</td><td>单目运算符,具有左结合性</td></tr><tr><td>2</td><td>自减运算符(在前)</td><td>--i</td><td>单目运算符,具有右结合性</td></tr></tbody></table><hr><ul><li>自增 <ul><li>如果只有<em><strong>单个</strong></em>变量, 无论++写在前面还是后面都会对变量做+1操作</li></ul></li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    number<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;number = %i\\n&quot;</span><span class="token punctuation">,</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 11</span>
    <span class="token operator">++</span>number<span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;number = %i\\n&quot;</span><span class="token punctuation">,</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 12</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>如果出现在一个表达式中, 那么++写在前面和后面就会有所区别 <ul><li>前缀表达式:++x, --x;其中x表示变量名,先完成变量的自增自减1运算,再用x的值作为表达式的值;即“先变后用”,也就是变量的值先变,再用变量的值参与运算</li><li>后缀表达式:x++, x--;先用x的当前值作为表达式的值,再进行自增自减1运算。即“先用后变”,也就是先用变量的值参与运算,变量的值再进行自增自减变化</li></ul></li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token comment">// ++在后, 先参与表达式运算, 再自增</span>
    <span class="token comment">// 表达式运算时为: 3 + 10;</span>
    <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">+</span> number<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;result = %i\\n&quot;</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 13</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;number = %i\\n&quot;</span><span class="token punctuation">,</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 11</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token comment">// ++在前, 先自增, 再参与表达式运算</span>
    <span class="token comment">// 表达式运算时为: 3 + 11;</span>
    <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token operator">++</span>number<span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;result = %i\\n&quot;</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 14</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;number = %i\\n&quot;</span><span class="token punctuation">,</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 11</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>自减</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token comment">// --在后, 先参与表达式运算, 再自减</span>
    <span class="token comment">// 表达式运算时为: 10 + 3;</span>
    <span class="token keyword">int</span> result <span class="token operator">=</span> number<span class="token operator">--</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;result = %i\\n&quot;</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 13</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;number = %i\\n&quot;</span><span class="token punctuation">,</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 9</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token comment">// --在前, 先自减, 再参与表达式运算</span>
    <span class="token comment">// 表达式运算时为: 9 + 3;</span>
    <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token operator">--</span>number <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;result = %i\\n&quot;</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 12</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;number = %i\\n&quot;</span><span class="token punctuation">,</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 9</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>注意点: <ul><li>自增、自减运算只能用于单个变量,只要是标准类型的变量,不管是整型、实型,还是字符型变量等,但不能用于表达式或常量 <ul><li>错误用法: <code>++(a+b); 5++;</code></li></ul></li><li>企业开发中尽量让++ -- 单独出现, 尽量不要和其它运算符混合在一起</li></ul></li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> b <span class="token operator">=</span> i<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// 不推荐</span>
或者
<span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token operator">++</span>i<span class="token punctuation">;</span> <span class="token comment">// 不推荐</span>
或者
<span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token operator">++</span>a <span class="token operator">+</span> a<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token comment">// 不推荐</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>请用如下代码替代</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> b <span class="token operator">=</span> i<span class="token punctuation">;</span> <span class="token comment">// 推荐</span>
i<span class="token operator">++</span><span class="token punctuation">;</span>
或者<span class="token punctuation">;</span>
i<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> b <span class="token operator">=</span> i<span class="token punctuation">;</span> <span class="token comment">// 推荐</span>
或者
<span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token operator">++</span>a<span class="token punctuation">;</span>
<span class="token keyword">int</span> b <span class="token operator">=</span> a <span class="token operator">+</span> a<span class="token punctuation">;</span> <span class="token comment">// 推荐</span>
a<span class="token operator">++</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>C语言标准没有明确的规定，<code>同一个表达式中同一个变量自增或自减后如何运算</code>, 不同编译器得到结果也不同, 在企业开发中千万不要这样写</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token comment">// 下列代码利用Qt运行时6, 利用Xcode运行是5</span>
    <span class="token comment">// 但是无论如何, 最终a的值都是3</span>
   <span class="token comment">//  在C语言中这种代码没有意义, 不用深究也不要这样写</span>
   <span class="token comment">// 特点: 参与运算的是同一个变量, 参与运算时都做了自增自减操作, 并且在同一个表达式中</span>
    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token operator">++</span>a <span class="token operator">+</span> <span class="token operator">++</span>a<span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;b = %i\\n&quot;</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="sizeof运算符" tabindex="-1"><a class="header-anchor" href="#sizeof运算符" aria-hidden="true">#</a> sizeof运算符</h2><ul><li><p>sizeof可以用来计算一个变量或常量、数据类型所占的内存字节数</p><ul><li>标准格式: sizeof(常量 or 变量);</li></ul></li><li><p>sizeof的几种形式</p><ul><li>sizeof( 变量\\常量 ); <ul><li><code>sizeof(10);</code></li><li><code>char c = &#39;a&#39;; sizeof(c);</code></li></ul></li><li>sizeof 变量\\常量; <ul><li><code>sizeof 10;</code></li><li><code>char c = &#39;a&#39;; sizeof c;</code></li></ul></li><li>sizeof( 数据类型); <ul><li><code>sizeof(float);</code></li><li><code>如果是数据类型不能省略括号</code></li></ul></li></ul></li><li><p>sizeof面试题:</p><ul><li>sizeof()和+=、*=一样是一个复合运算符, 由sizeof和()两个部分组成, 但是代表的是一个整体</li><li>所以sizeof不是一个函数, 是一个运算符, 该运算符的优先级是2</li></ul></li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token keyword">double</span> b <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span>
    <span class="token comment">// 由于sizeof的优先级比+号高, 所以会先计算sizeof(a);</span>
    <span class="token comment">// a是int类型, 所以占4个字节得到结果4</span>
    <span class="token comment">// 然后再利用计算结果和b相加, 4 + 3.14 = 7.14</span>
    <span class="token keyword">double</span> res <span class="token operator">=</span> <span class="token keyword">sizeof</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;res = %lf\\n&quot;</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 7.14</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="逗号运算符" tabindex="-1"><a class="header-anchor" href="#逗号运算符" aria-hidden="true">#</a> 逗号运算符</h2><ul><li>在C语言中逗号“,”也是一种运算符,称为逗号运算符。 其功能是把多个表达式连接起来组成一个表达式,称为逗号表达式</li><li>逗号运算符会从左至右依次取出每个表达式的值, 最后整个逗号表达式的值等于最后一个表达式的值</li><li>格式: <code>表达式1，表达式2，… …，表达式n;</code></li></ul><ul><li>例如: <code>int result = a+1,b=3*4;</code></li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">,</span> c<span class="token punctuation">;</span>
    <span class="token comment">// ()优先级高于逗号运算符和赋值运算符, 所以先计算()中的内容</span>
    <span class="token comment">// c = (11, 21);</span>
    <span class="token comment">// ()中是一个逗号表达式, 结果是最后一个表达式的值, 所以计算结果为21</span>
    <span class="token comment">// 将逗号表达式的结果赋值给c, 所以c的结果是21</span>
    c <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> b <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;c = %i\\n&quot;</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 21</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="关系运算符" tabindex="-1"><a class="header-anchor" href="#关系运算符" aria-hidden="true">#</a> 关系运算符</h2><ul><li>为什么要学习关系运算符</li></ul><ul><li>默认情况下，我们在程序中写的每一句正确代码都会被执行。但很多时候，我们想在某个条件成立的情况下才执行某一段代码</li><li>这种情况的话可以使用条件语句来完成，但是学习条件语句之前，我们先来看一些更基础的知识：如何判断一个条件是否成立</li></ul><hr><ul><li>C语言中的真假性</li></ul><ul><li>在C语言中，条件成立称为“真”，条件不成立称为“假”，因此，判断条件是否成立，就是判断条件的“真假”</li><li>怎么判断真假呢？C语言规定，任何数值都有真假性，任何非0值都为“真”，只有0才为“假”。也就是说，108、-18、4.5、-10.5等都是“真”，0则是“假”<br><img src="https://img-blog.csdnimg.cn/img_convert/bca554bbef13027b7dabc1bb67f47a6d.png" alt="" loading="lazy"></li></ul><hr><ul><li>关系运算符的运算结果只有2种：如果条件成立，结果就为1，也就是“真”；如果条件不成立，结果就为0，也就是“假”</li></ul><table><thead><tr><th>优先级</th><th>名称</th><th>符号</th><th>说明</th></tr></thead><tbody><tr><td>6</td><td>大于运算符</td><td>&gt;</td><td>双目运算符,具有左结合性</td></tr><tr><td>6</td><td>小于运算符</td><td>&lt;</td><td>双目运算符,具有左结合性</td></tr><tr><td>6</td><td>大于等于运算符</td><td>&gt;=</td><td>双目运算符,具有左结合性</td></tr><tr><td>6</td><td>小于等于运算符</td><td>&lt;=</td><td>双目运算符,具有左结合性</td></tr><tr><td>7</td><td>等于运算符</td><td>==</td><td>双目运算符,具有左结合性</td></tr><tr><td>7</td><td>不等于运算符</td><td>!=</td><td>双目运算符,具有左结合性</td></tr></tbody></table><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">&gt;</span> <span class="token number">5</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;result = %i\\n&quot;</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
    result <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;result = %i\\n&quot;</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
    result <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">&gt;</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;result = %i\\n&quot;</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>
    result <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">&gt;=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;result = %i\\n&quot;</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
    result <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;result = %i\\n&quot;</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
    result <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">==</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;result = %i\\n&quot;</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
    result <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">!=</span> <span class="token number">9</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;result = %i\\n&quot;</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>优先级和结合性</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// == 优先级 小于 &gt;, 所以先计算&gt;</span>
    <span class="token comment">// result = 10 == 1; result = 0;</span>
    <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">==</span> <span class="token number">5</span> <span class="token operator">&gt;</span> <span class="token number">3</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;result = %i\\n&quot;</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// == 和 != 优先级一样, 所以按照结合性</span>
    <span class="token comment">// 关系运算符是左结合性, 所以从左至右计算</span>
    <span class="token comment">// result = 0 != 3; result = 1;</span>
    <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">==</span> <span class="token number">5</span> <span class="token operator">!=</span> <span class="token number">3</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;result = %i\\n&quot;</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>练习: 计算result的结果</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> result1 <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">&gt;</span> <span class="token number">4</span> <span class="token operator">+</span> <span class="token number">7</span>
<span class="token keyword">int</span> result2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">&gt;</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">7</span>
<span class="token keyword">int</span> result3 <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">!=</span> <span class="token number">4</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">7</span> <span class="token operator">&gt;</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>注意点: <ul><li>无论是float还是double都有精度问题, 所以一定要避免利用==判断浮点数是否相等</li></ul></li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">float</span> a <span class="token operator">=</span> <span class="token number">0.1</span><span class="token punctuation">;</span>
    <span class="token keyword">float</span> b <span class="token operator">=</span> a <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0.00000000001</span><span class="token punctuation">;</span>
    <span class="token keyword">double</span> c <span class="token operator">=</span> <span class="token number">1.0</span> <span class="token operator">+</span> <span class="token operator">+</span> <span class="token number">0.00000000001</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;b = %f\\n&quot;</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;c = %f\\n&quot;</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> result <span class="token operator">=</span> b <span class="token operator">==</span> c<span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;result = %i\\n&quot;</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="逻辑运算符" tabindex="-1"><a class="header-anchor" href="#逻辑运算符" aria-hidden="true">#</a> 逻辑运算符</h2><table><thead><tr><th>优先级</th><th>名称</th><th>符号</th><th>说明</th></tr></thead><tbody><tr><td>2</td><td>逻辑非运算符</td><td>!</td><td>单目运算符,具有右结合性</td></tr><tr><td>11</td><td>逻辑与运算符</td><td>&amp;&amp;</td><td>双目运算符,具有左结合性</td></tr><tr><td>12</td><td>逻辑或运算符</td><td><code>||</code></td><td>双目运算符,具有左结合性</td></tr></tbody></table><ul><li>逻辑非</li></ul><ul><li><p>格式: <code>! 条件A;</code></p></li><li><p>运算结果: 真变假,假变真</p></li><li><p>运算过程:</p><ul><li>先判断条件A是否成立，如果添加A成立, 那么结果就为0，即“假”；</li><li>如果条件A不成立，结果就为1，即“真”</li></ul><ul><li>使用注意:</li></ul><ul><li>可以多次连续使用逻辑非运算符</li><li>!!!0;相当于(!(!(!0)));最终结果为1</li></ul></li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// ()优先级高, 先计算()里面的内容</span>
    <span class="token comment">// 10==10为真, 所以result = !(1);</span>
    <span class="token comment">// !代表真变假, 假变真,所以结果是假0</span>
    <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token operator">!</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">==</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;result = %i\\n&quot;</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><ul><li><p>逻辑与</p><ul><li>格式: <code>条件A &amp;&amp; 条件B;</code></li><li>运算结果:一假则假</li><li>运算过程:</li></ul><ul><li>总是先判断&quot;条件A&quot;是否成立</li><li>如果&quot;条件A&quot;成立，接着再判断&quot;条件B&quot;是否成立, 如果&quot;条件B&quot;也成立，结果就为1，即“真”</li><li>如果&quot;条件A&quot;成立，&quot;条件B&quot;不成立，结果就为0，即“假”</li><li>如果&quot;条件A&quot;不成立，不会再去判断&quot;条件B&quot;是否成立, 因为逻辑与只要一个不为真结果都不为真</li></ul><ul><li>使用注意:</li></ul><ul><li>&quot;条件A&quot;为假, &quot;条件B&quot;不会被执行</li></ul></li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//               真     &amp;&amp;    真</span>
    <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">==</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;result = %i\\n&quot;</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
    <span class="token comment">//          假     &amp;&amp;    真</span>
    result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">==</span> <span class="token number">9</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;result = %i\\n&quot;</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>
    <span class="token comment">//          真     &amp;&amp;    假</span>
    result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">==</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">!=</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;result = %i\\n&quot;</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>
    <span class="token comment">//          假     &amp;&amp;    假</span>
    result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">==</span> <span class="token number">9</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">!=</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;result = %i\\n&quot;</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
    <span class="token comment">// 逻辑与, 前面为假, 不会继续执行后面</span>
    <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">9</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">++</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;result = %i\\n&quot;</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;b = %i\\n&quot;</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 20</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><ul><li><p>逻辑或</p><ul><li>格式: <code>条件A || 条件B;</code></li><li>运算结果:一真则真</li><li>运算过程:</li></ul><ul><li>总是先判断&quot;条件A&quot;是否成立</li><li>如果&quot;条件A&quot;不成立，接着再判断&quot;条件B&quot;是否成立, 如果&quot;条件B&quot;成立，结果就为1，即“真”</li><li>如果&quot;条件A&quot;不成立，&quot;条件B&quot;也不成立成立, 结果就为0，即“假”</li><li>如果&quot;条件A&quot;成立, 不会再去判断&quot;条件B&quot;是否成立, 因为逻辑或只要一个为真结果都为真</li></ul><ul><li>使用注意:</li></ul><ul><li>&quot;条件A&quot;为真, &quot;条件B&quot;不会被执行</li></ul></li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//               真     ||    真</span>
    <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">==</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;result = %i\\n&quot;</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
    <span class="token comment">//          假     ||    真</span>
    result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">==</span> <span class="token number">9</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;result = %i\\n&quot;</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
    <span class="token comment">//          真     ||    假</span>
    result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">==</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">!=</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;result = %i\\n&quot;</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
    <span class="token comment">//          假     ||    假</span>
    result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">==</span> <span class="token number">9</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">!=</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;result = %i\\n&quot;</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
    <span class="token comment">// 逻辑或, 前面为真, 不会继续执行后面</span>
    <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token operator">++</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;result = %i\\n&quot;</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;b = %i\\n&quot;</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 20</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>练习: 计算result的结果</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">3</span><span class="token operator">&gt;</span><span class="token number">5</span> <span class="token operator">||</span> <span class="token number">2</span><span class="token operator">&lt;</span><span class="token number">4</span> <span class="token operator">&amp;&amp;</span> <span class="token number">6</span><span class="token operator">&lt;</span><span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr><h2 id="三目运算符" tabindex="-1"><a class="header-anchor" href="#三目运算符" aria-hidden="true">#</a> 三目运算符</h2><ul><li>三目运算符，它需要3个数据或表达式构成条件表达式</li><li>格式: <code>表达式1？表达式2(结果A)：表达式3(结果B)</code></li></ul><ul><li>示例: <code>考试及格 ? 及格 : 不及格;</code><br><img src="https://img-blog.csdnimg.cn/img_convert/47bcf1ddf7899400abb76c917b613962.png" alt="" loading="lazy"></li></ul><ul><li>求值规则:</li></ul><ul><li>如果&quot;表达式1&quot;为真，三目运算符的运算结果为&quot;表达式2&quot;的值(结果A)，否则为&quot;表达式3&quot;的值(结果B)</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>示例<span class="token operator">:</span>
    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">&gt;</span> b<span class="token punctuation">)</span> <span class="token operator">?</span> a <span class="token operator">:</span> b<span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;max = %d&quot;</span><span class="token punctuation">,</span> max<span class="token punctuation">)</span><span class="token punctuation">;</span>
    输出结果<span class="token operator">:</span> <span class="token number">20</span>
等价于<span class="token operator">:</span>
    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">&gt;</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>
      max<span class="token operator">=</span>a<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>
       max<span class="token operator">=</span>b<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;max = %d&quot;</span><span class="token punctuation">,</span> max<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>注意点</li></ul><ul><li>条件运算符的运算优先级低于关系运算符和算术运算符,但高于赋值符</li><li>条件运算符?和:是一个整体,不能分开使用</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
    <span class="token comment">// 先计算 a &gt; b</span>
    <span class="token comment">// 然后再根据计算结果判定返回a还是b</span>
    <span class="token comment">// 相当于int max= (a&gt;b) ? a : b;</span>
    <span class="token keyword">int</span> max<span class="token operator">=</span> a<span class="token operator">&gt;</span>b <span class="token operator">?</span> a <span class="token operator">:</span> b<span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;max = %i\\n&quot;</span><span class="token punctuation">,</span> max<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> d <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token comment">// 结合性是从右至左, 所以会先计算:后面的内容</span>
    <span class="token comment">// int res = a&gt;b?a:(c&gt;d?c:d);</span>
    <span class="token comment">// int res = a&gt;b?a:(20&gt;10?20:10);</span>
    <span class="token comment">// int res = a&gt;b?a:(20);</span>
    <span class="token comment">// 然后再计算最终的结果</span>
    <span class="token comment">// int res = 10&gt;5?10:(20);</span>
    <span class="token comment">// int res = 10;</span>
    <span class="token keyword">int</span> res <span class="token operator">=</span> a<span class="token operator">&gt;</span>b<span class="token operator">?</span>a<span class="token operator">:</span>c<span class="token operator">&gt;</span>d<span class="token operator">?</span>c<span class="token operator">:</span>d<span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;res = %i\\n&quot;</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="类型转换" tabindex="-1"><a class="header-anchor" href="#类型转换" aria-hidden="true">#</a> 类型转换</h2><table><thead><tr><th>强制类型转换(显示转换)</th><th>自动类型转换(隐式转换)</th></tr></thead><tbody><tr><td>(需要转换的类型)(表达式)</td><td>1.算数转换 2.赋值转换</td></tr></tbody></table><ul><li>强制类型转换(显示转换)</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">// 将double转换为int</span>
<span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token number">10.5</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>算数转换 <ul><li>系统会自动对占用内存较少的类型做一个“自动类型提升”的操作, 先将其转换为当前算数表达式中占用内存高的类型, 然后再参与运算</li></ul></li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">// 当前表达式用1.0占用8个字节, 2占用4个字节</span>
<span class="token comment">// 所以会先将整数类型2转换为double类型之后再计算</span>
<span class="token keyword">double</span> b <span class="token operator">=</span> <span class="token number">1.0</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>赋值转换</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">// 赋值时左边是什么类型,就会自动将右边转换为什么类型再保存</span>
<span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10.6</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>注意点:</li></ul><ul><li>参与计算的是什么类型, 结果就是什么类型</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">// 结果为0, 因为参与运算的都是整型</span>
<span class="token keyword">double</span> a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 结果为0.5, 因为1被强制转换为了double类型, 2也会被自动提升为double类型</span>
<span class="token keyword">double</span> b <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token number">1</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>类型转换并不会影响到原有变量的值</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">double</span> d <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>d<span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;num = %i\\n&quot;</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;d = %lf\\n&quot;</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3.140000</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,112),o=[e];function c(l,i){return s(),a("div",null,o)}const d=n(p,[["render",c],["__file","19.html.vue"]]);export{d as default};
