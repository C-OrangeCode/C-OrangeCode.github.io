import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e as t}from"./app-a1fbcbb6.js";const p={},o=t(`<h2 id="类型说明符" tabindex="-1"><a class="header-anchor" href="#类型说明符" aria-hidden="true">#</a> 类型说明符</h2><ul><li>类型说明符基本概念</li></ul><ul><li>C语言提供了<strong>说明长度</strong>和<strong>说明符号位</strong>的两种类型说明符, 这两种类型说明符一共有4个：</li><li>short 短整型 (说明长度)</li><li>long 长整型 (说明长度)</li><li>signed 有符号型 (说明符号位)</li><li>unsigned 无符号型 (说明符号位)</li></ul><ul><li>这些说明符一般都是用来修饰int类型的，所以在使用时可以省略int</li><li>这些说明符都属于C语言关键字</li></ul><hr><h2 id="short和long" tabindex="-1"><a class="header-anchor" href="#short和long" aria-hidden="true">#</a> short和long</h2><ul><li>short和long可以提供不同长度的整型数，也就是可以改变整型数的取值范围。</li></ul><ul><li>在64bit编译器环境下，int占用4个字节（32bit），取值范围是-2^31 ~ 2^31-1；</li><li>short占用2个字节（16bit），取值范围是-2^15 ~ 2^15-1；</li><li>long占用8个字节（64bit），取值范围是-2^63 ~ 2^63-1</li></ul><ul><li>总结一下：在64位编译器环境下:</li></ul><ul><li>short占2个字节(16位)</li><li>int占4个字节(32位)</li><li>long占8个字节(64位)。</li><li>因此，如果使用的整数不是很大的话，可以使用short代替int，这样的话，更节省内存开销。</li></ul><ul><li>世界上的编译器林林总总，不同编译器环境下，int、short、long的取值范围和占用的长度又是不一样的。比如在16bit编译器环境下，long只占用4个字节。不过幸运的是，ANSI \\ ISO制定了以下规则：</li></ul><ul><li>short跟int至少为16位(2字节)</li><li>long至少为32位(4字节)</li><li><strong>short的长度不能大于int，int的长度不能大于long</strong></li><li><strong>char一定为为8位(1字节)，毕竟char是我们编程能用的最小数据类型</strong></li></ul><ul><li>可以连续使用2个long，也就是long long。一般来说，long long的范围是不小于long的，比如在32bit编译器环境下，long long占用8个字节，long占用4个字节。不过在64bit编译器环境下，long long跟long是一样的，都占用8个字节。</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// char占1个字节, char的取值范围 -2^7~2^7</span>
    <span class="token keyword">char</span> num <span class="token operator">=</span> <span class="token number">129</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;size = %i\\n&quot;</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;num = %i\\n&quot;</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// -127</span>
    <span class="token comment">// short int 占2个字节, short int的取值范围 -2^15~2^15-1</span>
    <span class="token keyword">short</span> <span class="token keyword">int</span> num1 <span class="token operator">=</span> <span class="token number">32769</span><span class="token punctuation">;</span><span class="token comment">// -32767</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;size = %i\\n&quot;</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;num1 = %hi\\n&quot;</span><span class="token punctuation">,</span> num1<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// int占4个字节, int的取值范围 -2^31~2^31-1</span>
    <span class="token keyword">int</span> num2 <span class="token operator">=</span> <span class="token number">12345678901</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;size = %i\\n&quot;</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;num2 = %i\\n&quot;</span><span class="token punctuation">,</span> num2<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// long在32位占4个字节, 在64位占8个字节</span>
    <span class="token keyword">long</span> <span class="token keyword">int</span> num3 <span class="token operator">=</span> <span class="token number">12345678901</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;size = %i\\n&quot;</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>num3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4或8</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;num3 = %ld\\n&quot;</span><span class="token punctuation">,</span> num3<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// long在32位占8个字节, 在64位占8个字节 -2^63~2^63-1</span>
    <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token keyword">int</span> num4 <span class="token operator">=</span> <span class="token number">12345678901</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;size = %i\\n&quot;</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>num4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 8</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;num4 = %lld\\n&quot;</span><span class="token punctuation">,</span> num4<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// 由于short/long/long long一般都是用于修饰int, 所以int可以省略</span>
    <span class="token keyword">short</span> num5 <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;num5 = %lld\\n&quot;</span><span class="token punctuation">,</span> num5<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">long</span> num6 <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;num6 = %lld\\n&quot;</span><span class="token punctuation">,</span> num6<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">long</span> <span class="token keyword">long</span> num7 <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;num7 = %lld\\n&quot;</span><span class="token punctuation">,</span> num7<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="signed和unsigned" tabindex="-1"><a class="header-anchor" href="#signed和unsigned" aria-hidden="true">#</a> signed和unsigned</h2><ul><li>首先要明确的：signed int等价于signed，unsigned int等价于unsigned</li><li>signed和unsigned的区别就是它们的最高位是否要当做符号位，并不会像short和long那样改变数据的长度，即所占的字节数。</li></ul><ul><li>signed：表示有符号，也就是说最高位要当做符号位。但是int的最高位本来就是符号位，因此signed和int是一样的，signed等价于signed int，也等价于int。signed的取值范围是-2^31 ~ 2^31 - 1</li><li>unsigned：表示无符号，也就是说最高位并不当做符号位，所以不包括负数。</li><li>因此unsigned的取值范围是：0000 0000 0000 0000 0000 0000 0000 0000 ~ 1111 1111 1111 1111 1111 1111 1111 1111，也就是0 ~ 2^32 - 1</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 1.默认情况下所有类型都是由符号的</span>
    <span class="token keyword">int</span> num1 <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> num2 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> num3 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;num1 = %i\\n&quot;</span><span class="token punctuation">,</span> num1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;num2 = %i\\n&quot;</span><span class="token punctuation">,</span> num2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;num3 = %i\\n&quot;</span><span class="token punctuation">,</span> num3<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 2.signed用于明确说明, 当前保存的数据可以是有符号的, 一般情况下很少使用</span>
    <span class="token keyword">signed</span> <span class="token keyword">int</span> num4 <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>
    <span class="token keyword">signed</span> <span class="token keyword">int</span> num5 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">;</span>
    <span class="token keyword">signed</span> <span class="token keyword">int</span> num6 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;num4 = %i\\n&quot;</span><span class="token punctuation">,</span> num4<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;num5 = %i\\n&quot;</span><span class="token punctuation">,</span> num5<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;num6 = %i\\n&quot;</span><span class="token punctuation">,</span> num6<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// signed也可以省略数据类型, 但是不推荐这样编写</span>
    <span class="token keyword">signed</span> num7 <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;num7 = %i\\n&quot;</span><span class="token punctuation">,</span> num7<span class="token punctuation">)</span><span class="token punctuation">;</span>
   

    <span class="token comment">// 3.unsigned用于明确说明, 当前不能保存有符号的值, 只能保存0和正数</span>
    <span class="token comment">// 应用场景: 保存银行存款,学生分数等不能是负数的情况</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> num8 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> num9 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> num10 <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>
    <span class="token comment">// 注意: 不看怎么存只看怎么取</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;num8 = %u\\n&quot;</span><span class="token punctuation">,</span> num8<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;num9 = %u\\n&quot;</span><span class="token punctuation">,</span> num9<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;num10 = %u\\n&quot;</span><span class="token punctuation">,</span> num10<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>注意点:</li></ul><ul><li>修饰符号的说明符可以和修饰长度的说明符混合使用</li><li>相同类型的说明符不能混合使用</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>  <span class="token keyword">signed</span> <span class="token keyword">short</span> <span class="token keyword">int</span> num1 <span class="token operator">=</span> <span class="token number">666</span><span class="token punctuation">;</span>
  <span class="token keyword">signed</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> num2 <span class="token operator">=</span> <span class="token number">666</span><span class="token punctuation">;</span> <span class="token comment">// 报错</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,22),e=[o];function i(l,c){return s(),a("div",null,e)}const r=n(p,[["render",i],["__file","16.html.vue"]]);export{r as default};
