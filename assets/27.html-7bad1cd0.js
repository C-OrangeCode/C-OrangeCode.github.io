import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e}from"./app-a1fbcbb6.js";const l={},i=e(`<h2 id="_001-排序查询" tabindex="-1"><a class="header-anchor" href="#_001-排序查询" aria-hidden="true">#</a> 001.排序查询</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>* 语法：order by 子句
* order by 排序字段1 排序方式1 ，  排序字段2 排序方式2...

* 排序方式：
* ASC：升序，默认的。
* DESC：降序。

* 注意：
* 如果有多个排序条件，则当前边的条件值一样时，才会判断第二条件。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>按数学分数从低到高</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> NAME<span class="token punctuation">,</span>math <span class="token keyword">FROM</span> students <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> math<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>按语文分数从高到低</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> NAME<span class="token punctuation">,</span>chinese <span class="token keyword">FROM</span> students <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> chinese <span class="token keyword">DESC</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_002-聚合函数" tabindex="-1"><a class="header-anchor" href="#_002-聚合函数" aria-hidden="true">#</a> 002.聚合函数</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>1. count：计算个数
    1. 一般选择非空的列：主键
    2. count(*)
2. max：计算最大值
3. min：计算最小值
4. sum：计算和
5. avg：计算平均值
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>查询学生人数</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> 总人数 <span class="token keyword">FROM</span> students<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>查询各科成绩的最高分</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token function">MAX</span><span class="token punctuation">(</span>chinese<span class="token punctuation">)</span> 语文最高分<span class="token punctuation">,</span><span class="token function">MAX</span><span class="token punctuation">(</span>math<span class="token punctuation">)</span> 数学最高分<span class="token punctuation">,</span>
<span class="token function">MAX</span><span class="token punctuation">(</span>english<span class="token punctuation">)</span> 英语最高分
<span class="token keyword">FROM</span> students<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>计算各科成绩的平均分</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token function">AVG</span><span class="token punctuation">(</span>math<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">AVG</span><span class="token punctuation">(</span>chinese<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">AVG</span><span class="token punctuation">(</span>english<span class="token punctuation">)</span>
<span class="token keyword">FROM</span> students<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_003-分组查询" tabindex="-1"><a class="header-anchor" href="#_003-分组查询" aria-hidden="true">#</a> 003.分组查询</h2><ul><li><p>语法:<code>group by 分组字段；</code></p></li><li><p>注意:</p><ul><li><p>1.<code>分组之后查询的字段：分组字段、聚合函数</code></p></li><li><p>2.<code>where 和 having 的区别？</code></p><ul><li><p>1.where 在分组之前进行限定，如果不满足条件，则不参与分组。having 在分组之后进行限定，如果不满足结果，则不会被查询出来</p></li><li><p>2.where 后不可以跟聚合函数，having 可以进行聚合函数的判断。</p></li></ul></li></ul></li></ul><h2 id="_004-分页查询" tabindex="-1"><a class="header-anchor" href="#_004-分页查询" aria-hidden="true">#</a> 004.分页查询</h2><ul><li>语法:<code>limit 开始的索引,每页查询的条数;</code></li><li>公式:<code>开始的索引 = （当前的页码 - 1） * 每页显示的条数</code></li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student <span class="token keyword">LIMIT</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">-- 第1页</span>

<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student <span class="token keyword">LIMIT</span> <span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">-- 第2页</span>

<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student <span class="token keyword">LIMIT</span> <span class="token number">6</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">-- 第3页</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_005-约束分类" tabindex="-1"><a class="header-anchor" href="#_005-约束分类" aria-hidden="true">#</a> 005.约束分类</h2><ul><li>主键约束：primary key</li><li>非空约束：not null</li><li>唯一约束：unique</li><li>外键约束：foreign key</li></ul><h2 id="_006-非空约束" tabindex="-1"><a class="header-anchor" href="#_006-非空约束" aria-hidden="true">#</a> 006.非空约束</h2><ul><li>1.创建表时添加约束</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> stu<span class="token punctuation">(</span>
			id <span class="token keyword">INT</span><span class="token punctuation">,</span>
			NAME <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token comment">-- name为非空</span>
		<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>2.创建表完后，添加非空约束</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> stu <span class="token keyword">MODIFY</span> NAME <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>3.删除 name 的非空约束</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> stu <span class="token keyword">MODIFY</span> NAME <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_007-唯一约束" tabindex="-1"><a class="header-anchor" href="#_007-唯一约束" aria-hidden="true">#</a> 007.唯一约束</h2><ul><li>1.创建表时，添加唯一约束</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> stu<span class="token punctuation">(</span>
    id <span class="token keyword">INT</span><span class="token punctuation">,</span>
    phone_number <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">UNIQUE</span> <span class="token comment">-- 添加了唯一约束</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意<code>mysql</code>中，唯一约束限定的列的值可以有多个 null</p></blockquote><ul><li>2.删除唯一约束</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> stu <span class="token keyword">DROP</span> <span class="token keyword">INDEX</span> phone_number<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>3.在创建表后，添加唯一约束</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> stu <span class="token keyword">MODIFY</span> phone_number <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">UNIQUE</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_008-主键约束" tabindex="-1"><a class="header-anchor" href="#_008-主键约束" aria-hidden="true">#</a> 008.主键约束</h2><ul><li>1.注意： <ul><li>1.含义：非空且唯一</li><li>2.一张表只能有一个字段为主键</li><li>3.主键就是表中记录的唯一标识</li></ul></li><li>2.在创建表时，添加主键约束</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">table</span> stu<span class="token punctuation">(</span>
    id <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span><span class="token comment">-- 给id添加主键约束</span>
    name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>3.删除主键</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> stu <span class="token keyword">DROP</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>4.创建完表后，添加主键</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> stu <span class="token keyword">MODIFY</span> id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_009-自动增长" tabindex="-1"><a class="header-anchor" href="#_009-自动增长" aria-hidden="true">#</a> 009.自动增长</h2><ul><li>1.概念：如果某一列是数值类型的，使用 auto_increment 可以来完成值得自动增长</li><li>2.在创建表时，添加主键约束，并且完成主键自增长</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">table</span> stu<span class="token punctuation">(</span>
    id <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token keyword">auto_increment</span><span class="token punctuation">,</span><span class="token comment">-- 给id添加主键约束</span>
    name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>3.删除自动增长</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> stu <span class="token keyword">MODIFY</span> id <span class="token keyword">INT</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>4.添加自动增长</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> stu <span class="token keyword">MODIFY</span> id <span class="token keyword">INT</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_010-外键约束" tabindex="-1"><a class="header-anchor" href="#_010-外键约束" aria-hidden="true">#</a> 010.外键约束</h2><blockquote><p>foreign key,让表于表产生关系，从而保证数据的正确性。</p></blockquote><ul><li>1.在创建表时，可以添加外键</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">table</span> 表名<span class="token punctuation">(</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    外键列
    <span class="token keyword">constraint</span> 外键名称 <span class="token keyword">foreign</span> <span class="token keyword">key</span> <span class="token punctuation">(</span>外键列名称<span class="token punctuation">)</span> <span class="token keyword">references</span> 主表名称<span class="token punctuation">(</span>主表列名称<span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>2.删除外键</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名 <span class="token keyword">DROP</span> <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> 外键名称<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>3.创建表之后，添加外键</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名 <span class="token keyword">ADD</span> <span class="token keyword">CONSTRAINT</span> 外键名称 <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>外键字段名称<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> 主表名称<span class="token punctuation">(</span>主表列名称<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_011-级联操作" tabindex="-1"><a class="header-anchor" href="#_011-级联操作" aria-hidden="true">#</a> 011. 级联操作</h2><ul><li>1.添加级联操作</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名 <span class="token keyword">ADD</span> <span class="token keyword">CONSTRAINT</span> 外键名称
<span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>外键字段名称<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> 主表名称<span class="token punctuation">(</span>主表列名称<span class="token punctuation">)</span> <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">CASCADE</span> <span class="token keyword">ON</span> <span class="token keyword">DELETE</span> <span class="token keyword">CASCADE</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>2.分类 <ul><li>1.级联更新：ON UPDATE CASCADE</li><li>2.级联删除：ON DELETE CASCADE</li></ul></li></ul><h2 id="_012-表与表之间的关系" tabindex="-1"><a class="header-anchor" href="#_012-表与表之间的关系" aria-hidden="true">#</a> 012.表与表之间的关系</h2><ul><li>1.一对一 <ul><li>如：人和身份证</li><li>一个人只有一个身份证，一个身份证只能对应一个人</li></ul></li><li>2.一对多(多对一) <ul><li>如：部门和员工</li><li>分析：一个部门有多个员工，一个员工只能对应一个部门</li></ul></li><li>3.多对多 <ul><li>如：学生和课程</li><li>分析：一个学生可以选择很多门课程，一个课程也可以被很多学生选择</li></ul></li></ul><h2 id="_012-实现关系" tabindex="-1"><a class="header-anchor" href="#_012-实现关系" aria-hidden="true">#</a> 012.实现关系</h2><ul><li>1.一对多(多对一) <ul><li>如：部门和员工</li><li>实现方式：在多的一方建立外键，指向一的一方的主键。</li></ul></li><li>2.多对多 <ul><li>如：学生和课程</li><li>实现方式：多对多关系实现需要借助第三张中间表。中间表至少包含两个字段，这两个字段作为第三张表的外键，分别指向两张表的主键</li></ul></li><li>3.一对一 <ul><li>如：人和身份证</li><li>实现方式：一对一关系实现，可以在任意一方添加唯一外键指向另一方的主键。</li></ul></li></ul><h2 id="_013-案例" tabindex="-1"><a class="header-anchor" href="#_013-案例" aria-hidden="true">#</a> 013.案例</h2><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 创建旅游线路分类表 tab_category</span>
<span class="token comment">-- cid 旅游线路分类主键，自动增长</span>
<span class="token comment">-- cname 旅游线路分类名称非空，唯一，字符串 100</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> tab_category <span class="token punctuation">(</span>
    cid <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>
    cname <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">UNIQUE</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 创建旅游线路表 tab_route</span>
<span class="token comment">/*
rid 旅游线路主键，自动增长
rname 旅游线路名称非空，唯一，字符串 100
price 价格
rdate 上架时间，日期类型
cid 外键，所属分类
*/</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> tab_route<span class="token punctuation">(</span>
    rid <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>
    rname <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">UNIQUE</span><span class="token punctuation">,</span>
    price <span class="token keyword">DOUBLE</span><span class="token punctuation">,</span>
    rdate <span class="token keyword">DATE</span><span class="token punctuation">,</span>
    cid <span class="token keyword">INT</span><span class="token punctuation">,</span>
    <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>cid<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> tab_category<span class="token punctuation">(</span>cid<span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 创建旅游线路表 tab_route</span>
<span class="token comment">/*
rid 旅游线路主键，自动增长
rname 旅游线路名称非空，唯一，字符串 100
price 价格
rdate 上架时间，日期类型
cid 外键，所属分类
*/</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> tab_route<span class="token punctuation">(</span>
    rid <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>
    rname <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">UNIQUE</span><span class="token punctuation">,</span>
    price <span class="token keyword">DOUBLE</span><span class="token punctuation">,</span>
    rdate <span class="token keyword">DATE</span><span class="token punctuation">,</span>
    cid <span class="token keyword">INT</span><span class="token punctuation">,</span>
    <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>cid<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> tab_category<span class="token punctuation">(</span>cid<span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/*
创建收藏表 tab_favorite
rid 旅游线路 id，外键
date 收藏时间
uid 用户 id，外键
rid 和 uid 不能重复，设置复合主键，同一个用户不能收藏同一个线路两次
*/</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> tab_favorite <span class="token punctuation">(</span>
    rid <span class="token keyword">INT</span><span class="token punctuation">,</span> <span class="token comment">-- 线路id</span>
    <span class="token keyword">DATE</span> <span class="token keyword">DATETIME</span><span class="token punctuation">,</span>
    uid <span class="token keyword">INT</span><span class="token punctuation">,</span> <span class="token comment">-- 用户id</span>
    <span class="token comment">-- 创建复合主键</span>
    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span>rid<span class="token punctuation">,</span>uid<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">-- 联合主键</span>
    <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>rid<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> tab_route<span class="token punctuation">(</span>rid<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span>uid<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> tab_user<span class="token punctuation">(</span>uid<span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_014-数据库设计范式" tabindex="-1"><a class="header-anchor" href="#_014-数据库设计范式" aria-hidden="true">#</a> 014.数据库设计范式</h2><ul><li>1.第一范式（<code>1NF</code>）：每一列都是不可分割的原子数据项</li><li>2.第二范式（<code>2NF</code>）：在<code>1NF</code>的基础上，非码属性必须完全依赖于码（在<code>1NF</code>基础上消除非主属性对主码的部分函数依赖）</li><li>3.第三范式（<code>3NF</code>）：在<code>2NF</code>基础上，任何非主属性不依赖于其它非主属性（在<code>2NF</code>基础上消除传递依赖）</li></ul><h2 id="_015-备份和还原" tabindex="-1"><a class="header-anchor" href="#_015-备份和还原" aria-hidden="true">#</a> 015.备份和还原</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>* 备份： mysqldump -u用户名 -p密码 数据库名称 &gt; 保存的路径
* 还原：
    1. 登录数据库
    2. 创建数据库
    3. 使用数据库
    4. 执行文件。source 文件路径
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,72),p=[i];function t(c,o){return s(),a("div",null,p)}const r=n(l,[["render",t],["__file","27.html.vue"]]);export{r as default};
