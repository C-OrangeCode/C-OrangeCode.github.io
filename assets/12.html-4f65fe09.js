import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e as t}from"./app-a1fbcbb6.js";const p={},c=t(`<h2 id="字符串的基本概念" tabindex="-1"><a class="header-anchor" href="#字符串的基本概念" aria-hidden="true">#</a> 字符串的基本概念</h2><ul><li>字符串是位于双引号中的字符序列</li></ul><ul><li>在内存中以“\\0”结束,所占字节比实际多一个<br><img src="https://img-blog.csdnimg.cn/img_convert/e0f0831ff1b110569a7e34440ab62e9e.png" alt="" loading="lazy"></li></ul><h2 id="字符串的初始化" tabindex="-1"><a class="header-anchor" href="#字符串的初始化" aria-hidden="true">#</a> 字符串的初始化</h2><ul><li>在C语言中没有专门的字符串变量,通常用一个字符数组来存放一个字符串。</li><li>当把一个字符串存入一个数组时,会把结束符‘\\0’存入数组,并以此作为该字符串是否结束的标志。</li><li>有了‘\\0’标志后,就不必再用字符数组 的长度来判断字符串的长度了</li><li>初始化</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;lnj&quot;</span><span class="token punctuation">;</span> <span class="token comment">//在内存中以“\\0”结束， \\0ASCII码值是0</span>
    <span class="token keyword">char</span> name1<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token char">&#39;l&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;n&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;j&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;\\0&#39;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> name2<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token char">&#39;l&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;n&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;j&#39;</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token comment">// 当数组元素个数大于存储字符内容时, 未被初始化的部分默认值是0, 所以下面也可以看做是一个字符串</span>
    <span class="token keyword">char</span> name3<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token char">&#39;l&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;n&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;j&#39;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>错误的初始化方式</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>    <span class="token comment">//省略元素个数时, 不能省略末尾的\\n</span>
    <span class="token comment">// 不正确地写法，结尾没有\\0 ，只是普通的字符数组</span>
    <span class="token keyword">char</span> name4<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token char">&#39;l&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;n&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;j&#39;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

     <span class="token comment">//   &quot;中间不能包含\\0&quot;, 因为\\0是字符串的结束标志</span>
     <span class="token comment">//    \\0的作用：字符串结束的标志</span>
    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;c\\0ool&quot;</span><span class="token punctuation">;</span>
     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;name = %s\\n&quot;</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
输出结果<span class="token operator">:</span> c
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="字符串输出" tabindex="-1"><a class="header-anchor" href="#字符串输出" aria-hidden="true">#</a> 字符串输出</h2><ul><li>如果字符数组中存储的是一个字符串, 那么字符数组的输入输出将变得简单方便。</li></ul><ul><li>不必使用循环语句逐个地输入输出每个字符</li><li>可以使用printf函数和scanf函数一次性输出输入一个字符数组中的字符串</li></ul><ul><li>使用的格式字符串为“%s”,表示输入、输出的是一个字符串 字符串的输出</li></ul><hr><ul><li><strong>输出</strong></li></ul><ul><li>%s的本质就是根据传入的name的地址逐个去取数组中的元素然后输出，直到遇到\\0位置</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">char</span> chs<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;lnj&quot;</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s\\n&quot;</span><span class="token punctuation">,</span> chs<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>注意点:</li></ul><ul><li>\\0引发的脏读问题</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token char">&#39;c&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;o&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;o&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;l&#39;</span> <span class="token punctuation">,</span> <span class="token char">&#39;\\0&#39;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> name2<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token char">&#39;l&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;n&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;j&#39;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;name2 = %s\\n&quot;</span><span class="token punctuation">,</span> name2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出结果: lnjcool</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><ul><li><strong>输入</strong></li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">char</span> ch<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%s&quot;</span><span class="token punctuation">,</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>注意点:</li></ul><ul><li>对一个字符串数组, 如果不做初始化赋值, 必须指定数组长度</li><li>ch最多存放由9个字符构成的字符串，其中最后一个字符的位置要留给字符串的结尾标示‘\\0’</li><li>当用scanf函数输入字符串时,字符串中不能含有空格,否则将以空格作为串的结束符</li></ul>`,25),e=[c];function o(l,i){return s(),a("div",null,e)}const k=n(p,[["render",o],["__file","12.html.vue"]]);export{k as default};
