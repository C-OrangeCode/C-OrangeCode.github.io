import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e as p}from"./app-a1fbcbb6.js";const t={},e=p(`<h2 id="函数基本概念" tabindex="-1"><a class="header-anchor" href="#函数基本概念" aria-hidden="true">#</a> 函数基本概念</h2><ul><li>C源程序是由函数组成的</li></ul><ul><li>例如: 我们前面学习的课程当中,通过main函数+scanf函数+printf函数+逻辑代码就可以组成一个C语言程序</li></ul><ul><li>C语言不仅提供了极为丰富的库函数, 还允许用户建立自己定义的函数。用户可把自己的算法编写成一个个相对独立的函数，然后再需要的时候调用它</li></ul><ul><li>例如:你用C语言编写了一个MP3播放器程序，那么它的程序结构如下图所示</li><li><img src="https://img-blog.csdnimg.cn/img_convert/5ae3272e9f2f49988524b0e511a40287.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></li></ul><ul><li>可以说C程序的全部工作都是由各式各样的函数完成的,所以也把C语言称为函数式语言</li></ul><hr><h2 id="函数的分类" tabindex="-1"><a class="header-anchor" href="#函数的分类" aria-hidden="true">#</a> 函数的分类</h2><ul><li>在C语言中可从不同的角度对函数分类</li><li>从函数定义的角度看,函数可分为库函数和用户定义函数两种</li></ul><ul><li><em><strong>库函数:</strong></em> 由C语言系统提供,用户无须定义,也不必在程序中作类型说明,只需在程序前包含有该函数原型的头文件即可在程序中直接调用。在前面各章的例题中反复用到printf、scanf、getchar、putchar等函数均属此类</li><li>***用户定义函数:***由用户按需编写的函数。对于用户自定义函数,不仅要在程序中定义函数本身,而且在主调函数模块中还必须对该被调函数进行类型说明,然后才能使用</li></ul><ul><li>从函数执行结果的角度来看, 函数可分为有返回值函数和无返回值函数两种</li></ul><ul><li><em><strong>有返回值函数:</strong></em> 此类函数被调用执行完后将向调用者返回一个执行结果,称为函数返回值。(必须指定返回值类型和使用return关键字返回对应数据)</li><li><em><strong>无返回值函数:</strong></em> 此类函数用于完成某项特定的处理任务,执行完成后不向调用者返回函数值。(返回值类型为void, 不用使用return关键字返回对应数据)</li></ul><ul><li>从主调函数和被调函数之间数据传送的角度看,又可分为无参函数和有参函数两种</li></ul><ul><li><em><strong>无参函数:</strong></em> 在函数定义及函数说明及函数调用中均不带参数。主调函数和被调函数之间不进行参数传送。</li><li><em><strong>有参函数:</strong></em> 在函数定义及函数说明时都有参数,称为形式参数(简称为形参)。在函数调用时也必须给出参数,称为实际参数(简称为实参)</li></ul><hr><h2 id="函数的定义" tabindex="-1"><a class="header-anchor" href="#函数的定义" aria-hidden="true">#</a> 函数的定义</h2><ul><li>定义函数的目的</li></ul><ul><li>将一个常用的功能封装起来，方便以后调用</li></ul><ul><li>自定义函数的书写格式</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>返回值类型 函数名<span class="token punctuation">(</span>参数类型 形式参数<span class="token number">1</span>，参数类型 形式参数<span class="token number">2</span>，…<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    函数体<span class="token punctuation">;</span>
    返回值<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>示例</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;hello world\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    retrun <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>定义函数的步骤</li></ul><ul><li>函数名：函数叫什么名字</li><li>函数体：函数是干啥的，里面包含了什么代码</li><li>返回值类型: 函数执行完毕返回什么和调用者</li></ul><hr><ul><li>无参无返回值函数定义</li></ul><ul><li><p>没有返回值时return可以省略</p></li><li><p>格式:</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> 函数名<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    函数体<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>示例:</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">// 1.没有返回值/没有形参</span>
<span class="token comment">// 如果一个函数不需要返回任何数据给调用者, 那么返回值类型就是void</span>
<span class="token keyword">void</span> <span class="token function">printRose</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot; {@}\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;  |\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot; \\\\|/\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 注意: \\是一个特殊的符号(转意字符), 想输出\\必须写两个斜线</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;  |\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 如果函数不需要返回数据给调用者, 那么函数中的return可以不写</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><hr><ul><li>无参有返回值函数定义</li></ul><ul><li><p>格式:</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>返回值类型 函数名<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    函数体<span class="token punctuation">;</span>
    <span class="token keyword">return</span> 值<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>示例:</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">getMax</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;请输入两个整数, 以逗号隔开, 以回车结束\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> number1<span class="token punctuation">,</span> number2<span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%i,%i&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>number1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>number2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> max <span class="token operator">=</span> number1 <span class="token operator">&gt;</span> number2 <span class="token operator">?</span> number1 <span class="token operator">:</span> number2<span class="token punctuation">;</span>
    <span class="token keyword">return</span> max<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><hr><ul><li>有参无返回值函数定义</li></ul><ul><li><p>形式参数表列表的格式: <code>类型 变量名,类型 变量2,......</code></p></li><li><p>格式:</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> 函数名<span class="token punctuation">(</span>参数类型 形式参数<span class="token number">1</span>，参数类型 形式参数<span class="token number">2</span>，…<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    函数体<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>示例:</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">printMax</span><span class="token punctuation">(</span><span class="token keyword">int</span> value1<span class="token punctuation">,</span> <span class="token keyword">int</span> value2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> max <span class="token operator">=</span> value1 <span class="token operator">&gt;</span> value2 <span class="token operator">?</span> value1 <span class="token operator">:</span> value2<span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;max = %i\\n&quot;</span><span class="token punctuation">,</span> max<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><hr><ul><li>有参有返回值函数定义</li></ul><ul><li><p>格式:</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>返回值类型 函数名<span class="token punctuation">(</span>参数类型 形式参数<span class="token number">1</span>，参数类型 形式参数<span class="token number">2</span>，…<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    函数体<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>示例:</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code> <span class="token keyword">int</span> <span class="token function">printMax</span><span class="token punctuation">(</span><span class="token keyword">int</span> value1<span class="token punctuation">,</span> <span class="token keyword">int</span> value2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> max <span class="token operator">=</span> value1 <span class="token operator">&gt;</span> value2 <span class="token operator">?</span> value1 <span class="token operator">:</span> value2<span class="token punctuation">;</span>
    <span class="token keyword">return</span> max<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><hr><ul><li><p>函数定义注意</p></li><li><p>函数名称不能相同</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 报错</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><hr><h2 id="函数的参数和返回值" tabindex="-1"><a class="header-anchor" href="#函数的参数和返回值" aria-hidden="true">#</a> 函数的参数和返回值</h2><ul><li>形式参数 <ul><li>在***定义函数***时，函数名后面小括号()中定义的变量称为形式参数，简称形参</li><li>形参变量只有在被调用时才分配内存单元,在调用结束时,即刻释放所分配的内存单元。</li><li>因此,形参只有在函数内部有效,函数调用结束返回主调函数后则不能再使用该形参变量</li></ul></li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">int</span> number1<span class="token punctuation">,</span> <span class="token keyword">int</span> number2<span class="token punctuation">)</span> <span class="token comment">//  形式参数</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> number1 <span class="token operator">&gt;</span> number2 <span class="token operator">?</span> number1 <span class="token operator">:</span> number2<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><ul><li>实际参数 <ul><li>在***调用函数***时, 传入的值称为实际参数，简称实参</li><li>实参可以是常量、变量、表达式、函数等,无论实参是何种类型的量,在进行函数调用时,它们都必须具有确定的值,以便把这些值传送给形参</li><li>因此应预先用赋值,输入等办法使实参获得确定值</li></ul></li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">99</span><span class="token punctuation">;</span>
    <span class="token comment">// 88, num, 22+44均能得到一个确定的值, 所以都可以作为实参</span>
    <span class="token function">max</span><span class="token punctuation">(</span><span class="token number">88</span><span class="token punctuation">,</span> num<span class="token punctuation">,</span> <span class="token number">22</span><span class="token operator">+</span><span class="token number">44</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 实际参数</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><ul><li><p>形参、实参注意点</p><ul><li>调用函数时传递的实参个数必须和函数的形参个数必须保持一致</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">int</span> number1<span class="token punctuation">,</span> <span class="token keyword">int</span> number2<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//  形式参数</span>
    <span class="token keyword">return</span> number1 <span class="token operator">&gt;</span> number2 <span class="token operator">?</span> number1 <span class="token operator">:</span> number2<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 函数需要2个形参, 但是我们只传递了一个实参, 所以报错</span>
    <span class="token function">max</span><span class="token punctuation">(</span><span class="token number">88</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 实际参数</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><ul><li>形参实参类型不一致, 会自动转换为形参类型</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">change</span><span class="token punctuation">(</span><span class="token keyword">double</span> number1<span class="token punctuation">,</span> <span class="token keyword">double</span> number2<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//  形式参数</span>
   <span class="token comment">// 输出结果: 10.000000, 20.000000</span>
   <span class="token comment">// 自动将实参转换为double类型后保存</span>
   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;number1 = %f, number2 = %f&quot;</span><span class="token punctuation">,</span> number1<span class="token punctuation">,</span> number2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">change</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><ul><li>当使用基本数据类型（char、int、float等）作为实参时，实参和形参之间只是值传递，修改形参的值并不影响到实参函数可以没有形参</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">change</span><span class="token punctuation">(</span><span class="token keyword">int</span> number1<span class="token punctuation">,</span> <span class="token keyword">int</span> number2<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//  形式参数</span>
    number1 <span class="token operator">=</span> <span class="token number">250</span><span class="token punctuation">;</span> <span class="token comment">// 不会影响实参</span>
    number2 <span class="token operator">=</span> <span class="token number">222</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">88</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">99</span><span class="token punctuation">;</span>
    <span class="token function">change</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;a  = %d, b = %d&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出结果: 88, 99</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><hr><ul><li><p>返回值类型注意点</p><ul><li>如果没有写返回值类型，默认是int</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">int</span> number1<span class="token punctuation">,</span> <span class="token keyword">int</span> number2<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//  形式参数</span>
    <span class="token keyword">return</span> number1 <span class="token operator">&gt;</span> number2 <span class="token operator">?</span> number1 <span class="token operator">:</span> number2<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><ul><li>函数返回值的类型和return实际返回的值类型应保持一致。如果两者不一致,则以返回值类型为准,自动进行类型转换</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">height</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token number">3.14</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">double</span> temp <span class="token operator">=</span> <span class="token function">height</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%lf&quot;</span><span class="token punctuation">,</span> temp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 输出结果: 3.000000</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><ul><li>一个函数内部可以多次使用return语句，但是return语句后面的代码就不再被执行</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">int</span> number1<span class="token punctuation">,</span> <span class="token keyword">int</span> number2<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//  形式参数</span>
    <span class="token keyword">return</span> number1 <span class="token operator">&gt;</span> number2 <span class="token operator">?</span> number1 <span class="token operator">:</span> number2<span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;执行不到&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 执行不到</span>
    <span class="token keyword">return</span> <span class="token number">250</span><span class="token punctuation">;</span> <span class="token comment">// 执行不到</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><hr><h2 id="函数的声明" tabindex="-1"><a class="header-anchor" href="#函数的声明" aria-hidden="true">#</a> 函数的声明</h2><ul><li>在C语言中，函数的定义顺序是有讲究的：</li></ul><ul><li>默认情况下，只有后面定义的函数才可以调用前面定义过的函数</li></ul><ul><li>如果想把函数的定义写在main函数后面，而且main函数能正常调用这些函数，那就必须在main函数的前面进行函数的声明, 否则</li></ul><ul><li>系统搞不清楚有没有这个函数</li><li>系统搞不清楚这个函数接收几个参数</li><li>系统搞不清楚这个函数的返回值类型是什么</li></ul><ul><li>所以函数声明,就是在函数调用之前告诉系统, 该函数叫什么名称, 该函数接收几个参数, 该函数的返回值类型是什么</li><li>函数的声明格式：</li></ul><ul><li>将自定义函数时{}之前的内容拷贝到调用之间即可</li><li>例如: <code>int max( int a, int b );</code></li><li>或者: <code>int max( int, int );</code></li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">// 函数声明</span>
<span class="token keyword">void</span> <span class="token function">getMax</span><span class="token punctuation">(</span><span class="token keyword">int</span> v1<span class="token punctuation">,</span> <span class="token keyword">int</span> v2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">getMax</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 调用函数</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 函数实现</span>
<span class="token keyword">void</span> <span class="token function">getMax</span><span class="token punctuation">(</span><span class="token keyword">int</span> v1<span class="token punctuation">,</span> <span class="token keyword">int</span> v2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> max <span class="token operator">=</span> v1 <span class="token operator">&gt;</span> v2 <span class="token operator">?</span> v1 <span class="token operator">:</span> v2<span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;max = %i\\n&quot;</span><span class="token punctuation">,</span> max<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>函数的声明与实现的关系</li></ul><ul><li>声明仅仅代表着告诉系统一定有这个函数, 和这个函数的参数、返回值是什么</li><li>实现代表着告诉系统, 这个函数具体的业务逻辑是怎么运作的</li></ul><ul><li>函数声明注意点:</li></ul><ul><li><p>函数的实现不能重复, 而函数的声明可以重复</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">// 函数声明</span>
<span class="token keyword">void</span> <span class="token function">getMax</span><span class="token punctuation">(</span><span class="token keyword">int</span> v1<span class="token punctuation">,</span> <span class="token keyword">int</span> v2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">getMax</span><span class="token punctuation">(</span><span class="token keyword">int</span> v1<span class="token punctuation">,</span> <span class="token keyword">int</span> v2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">getMax</span><span class="token punctuation">(</span><span class="token keyword">int</span> v1<span class="token punctuation">,</span> <span class="token keyword">int</span> v2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 不会报错</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">getMax</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 调用函数</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 函数实现</span>
<span class="token keyword">void</span> <span class="token function">getMax</span><span class="token punctuation">(</span><span class="token keyword">int</span> v1<span class="token punctuation">,</span> <span class="token keyword">int</span> v2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> max <span class="token operator">=</span> v1 <span class="token operator">&gt;</span> v2 <span class="token operator">?</span> v1 <span class="token operator">:</span> v2<span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;max = %i\\n&quot;</span><span class="token punctuation">,</span> max<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><ul><li><p>函数声明可以写在函数外面,也可以写在函数里面, 只要在调用之前被声明即可</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">getMax</span><span class="token punctuation">(</span><span class="token keyword">int</span> v1<span class="token punctuation">,</span> <span class="token keyword">int</span> v2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 函数声明, 不会报错</span>
    <span class="token function">getMax</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 调用函数</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 函数实现</span>
<span class="token keyword">void</span> <span class="token function">getMax</span><span class="token punctuation">(</span><span class="token keyword">int</span> v1<span class="token punctuation">,</span> <span class="token keyword">int</span> v2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> max <span class="token operator">=</span> v1 <span class="token operator">&gt;</span> v2 <span class="token operator">?</span> v1 <span class="token operator">:</span> v2<span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;max = %i\\n&quot;</span><span class="token punctuation">,</span> max<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>当被调函数的函数定义出现在主调函数之前时,在主调函数中也可以不对被调函数再作声明</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">// 函数实现</span>
<span class="token keyword">void</span> <span class="token function">getMax</span><span class="token punctuation">(</span><span class="token keyword">int</span> v1<span class="token punctuation">,</span> <span class="token keyword">int</span> v2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> max <span class="token operator">=</span> v1 <span class="token operator">&gt;</span> v2 <span class="token operator">?</span> v1 <span class="token operator">:</span> v2<span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;max = %i\\n&quot;</span><span class="token punctuation">,</span> max<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">getMax</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 调用函数</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>如果被调函数的返回值是整型时,可以不对被调函数作说明,而直接调用</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token function">getMin</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 不会报错</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;result = %d\\n&quot;</span><span class="token punctuation">,</span> res <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">getMin</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1<span class="token punctuation">,</span> <span class="token keyword">int</span> num2<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 返回int, 不用声明</span>
    <span class="token keyword">return</span> num1 <span class="token operator">&lt;</span> num2 <span class="token operator">?</span> num1 <span class="token operator">:</span> num2<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><hr>`,64),o=[e];function c(l,i){return s(),a("div",null,o)}const k=n(t,[["render",c],["__file","07.html.vue"]]);export{k as default};
