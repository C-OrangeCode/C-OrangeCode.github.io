import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e}from"./app-a1fbcbb6.js";const p={},t=e(`<h2 id="进程空间" tabindex="-1"><a class="header-anchor" href="#进程空间" aria-hidden="true">#</a> 进程空间</h2><ul><li>程序，是经源码编译后的可执行文件，可执行文件可以多次被执行，比如我们可以多次打开 office。</li><li>而进程，是程序加载到内存后开始执行，至执行结束，这样一段时间概念，多次打开的 wps,每打开一次都是一个进程，当我们每关闭一个 office，则表示该进程结束。</li><li>程序是静态概念，而进程动态/时间概念。 ###进程空间图示<br> 有了进程和程序的概念以后，我们再来看一下，程序被加载到内存以后内存空间布局是什么样的<br><img src="https://img-blog.csdnimg.cn/img_convert/5d2e966e95f1518585804e57779e7fe6.png" alt="" loading="lazy"></li></ul><hr><h2 id="栈内存-stack" tabindex="-1"><a class="header-anchor" href="#栈内存-stack" aria-hidden="true">#</a> 栈内存(Stack)</h2><ul><li>栈中存放任意类型的变量，但必须是 auto 类型修饰的，即自动类型的局部变量， 随用随开，用完即消。</li><li>内存的分配和销毁系统自动完成，不需要人工干预</li><li>栈的最大尺寸固定，超出则引起栈溢出</li></ul><ul><li>局部变量过多，过大 或 递归层数太多等就会导致栈溢出</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> ages<span class="token punctuation">[</span><span class="token number">10240</span><span class="token operator">*</span><span class="token number">10240</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 程序会崩溃, 栈溢出</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 存储在栈中, 内存地址从大到小</span>
    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;&amp;a = %p\\n&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &amp;a = 0060FEAC</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;&amp;b = %p\\n&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &amp;b = 0060FEA8</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="堆内存-heap" tabindex="-1"><a class="header-anchor" href="#堆内存-heap" aria-hidden="true">#</a> 堆内存(Heap)</h2><ul><li>堆内存可以存放任意类型的数据，但需要自己申请与释放</li><li>堆大小，想像中的无穷大，但实际使用中，受限于实际内存的大小和内存是否连续性</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">10240</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 不一定会崩溃</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 存储在栈中, 内存地址从小到大</span>
    <span class="token keyword">int</span> <span class="token operator">*</span>p1 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">*</span>p1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token operator">*</span>p2 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">*</span>p2 <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;p1 = %p\\n&quot;</span><span class="token punctuation">,</span> p1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//  p1 = 00762F48</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;p2 = %p\\n&quot;</span><span class="token punctuation">,</span> p2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// p2 = 00762F58</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="" tabindex="-1"><a class="header-anchor" href="#" aria-hidden="true">#</a></h2>`,14),c=[t];function o(i,l){return s(),a("div",null,c)}const d=n(p,[["render",o],["__file","40.html.vue"]]);export{d as default};
