import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{o as n,c as a,e}from"./app-a1fbcbb6.js";const p={},o=e(`<h2 id="原码反码补码" tabindex="-1"><a class="header-anchor" href="#原码反码补码" aria-hidden="true">#</a> 原码反码补码</h2><ul><li><p>计算机只能识别0和1, 所以计算机中存储的数据都是以0和1的形式存储的</p></li><li><p>数据在计算机内部是以补码的形式储存的, 所有数据的运算都是以补码进行的</p></li><li><p>正数的原码、反码和补码</p><ul><li>正数的原码、反码和补码都是它的二进制</li><li>例如: 12的原码、反码和补码分别为 <ul><li><code>0000 0000 0000 0000 0000 0000 0000 1100</code></li><li><code>0000 0000 0000 0000 0000 0000 0000 1100</code></li><li><code>0000 0000 0000 0000 0000 0000 0000 1100</code></li></ul></li></ul></li><li><p>负数的原码、反码和补码</p><ul><li>二进制的最高位我们称之为符号位, 最高位是0代表是一个正数, 最高位是1代表是一个负数</li><li>一个负数的原码, 是将该负数的二进制最高位变为1</li><li>一个负数的反码, 是将该数的原码<code>除了符号位</code>以外的其它位取反</li><li>一个负数的补码, 就是它的反码 + 1</li><li>例如: -12的原码、反码和补码分别为</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>  <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">1100</span> <span class="token comment">// 12二进制</span>
  <span class="token number">1000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">1100</span> <span class="token comment">// -12原码</span>
  <span class="token number">1111</span> <span class="token number">1111</span> <span class="token number">1111</span> <span class="token number">1111</span> <span class="token number">1111</span> <span class="token number">1111</span> <span class="token number">1111</span> <span class="token number">0011</span>  <span class="token comment">// -12反码</span>
  <span class="token number">1111</span> <span class="token number">1111</span> <span class="token number">1111</span> <span class="token number">1111</span> <span class="token number">1111</span> <span class="token number">1111</span> <span class="token number">1111</span> <span class="token number">0100</span> <span class="token comment">// -12补码</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>负数的原码、反码和补码逆向转换</p><ul><li>反码 = 补码-1</li><li>原码= 反码最高位不变, 其它位取反</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>  <span class="token number">1111</span> <span class="token number">1111</span> <span class="token number">1111</span> <span class="token number">1111</span> <span class="token number">1111</span> <span class="token number">1111</span> <span class="token number">1111</span> <span class="token number">0100</span> <span class="token comment">// -12补码</span>
  <span class="token number">1111</span> <span class="token number">1111</span> <span class="token number">1111</span> <span class="token number">1111</span> <span class="token number">1111</span> <span class="token number">1111</span> <span class="token number">1111</span> <span class="token number">0011</span>  <span class="token comment">// -12反码</span>
  <span class="token number">1000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">1100</span> <span class="token comment">// -12原码</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><hr><ul><li><p>为什么要引入反码和补码</p><ul><li><p>在学习本节内容之前,大家必须明白一个东西, 就是计算机只能做加法运算, 不能做减法和乘除法, 所以的减法和乘除法内部都是用加法来实现的</p><ul><li>例如: 1 - 1, 内部其实就是 1 + (-1);</li><li>例如: 3 * 3, 内部其实就是 3 + 3 + 3;</li><li>例如: 9 / 3, 内部其实就是 9 + (-3) + (-3) + (-3);</li></ul></li><li><p>首先我们先来观察一下,如果只有原码会存储什么问题</p><ul><li>很明显, 通过我们的观察, 如果只有原码, 1-1的结果不对</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>  <span class="token comment">// 1 + 1</span>
   <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0001</span> <span class="token comment">// 1原码</span>
  <span class="token operator">+</span><span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0001</span> <span class="token comment">// 1原码</span>
   <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>
   <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0010</span>  <span class="token operator">==</span> <span class="token number">2</span>

   <span class="token comment">// 1 - 1; 1 + (-1);</span>
   <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0001</span> <span class="token comment">// 1原码</span>
  <span class="token operator">+</span><span class="token number">1000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0001</span> <span class="token comment">// -1原码</span>
   <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>
   <span class="token number">1000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0010</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><ul><li>正是因为对于减法来说,如果使用原码结果是不正确的, 所以才引入了反码 <ul><li>通过反码计算减法的结果, 得到的也是一个反码;</li><li>将计算的结果符号位不变其余位取反,就得到了计算结果的原码</li><li>通过对原码的转换, 很明显我们计算的结果是-0, 符合我们的预期</li></ul></li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>  <span class="token comment">// 1 - 1; 1 + (-1);</span>
  <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0001</span> <span class="token comment">// 1反码</span>
  <span class="token number">1111</span> <span class="token number">1111</span> <span class="token number">1111</span> <span class="token number">1111</span> <span class="token number">1111</span> <span class="token number">1111</span> <span class="token number">1111</span> <span class="token number">1110</span>   <span class="token comment">// -1反码</span>
  <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>
  <span class="token number">1111</span> <span class="token number">1111</span> <span class="token number">1111</span> <span class="token number">1111</span> <span class="token number">1111</span> <span class="token number">1111</span> <span class="token number">1111</span> <span class="token number">1111</span> <span class="token comment">// 计算结果反码</span>
  <span class="token number">1000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token comment">// 计算结果原码 == -0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><ul><li>虽然反码能够满足我们的需求, 但是对于0来说, 前面的负号没有任何意义, 所以才引入了补码 <ul><li>由于int只能存储4个字节, 也就是32位数据, 而计算的结果又33位, 所以最高位溢出了,符号位变成了0, 所以最终得到的结果是0</li></ul></li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>  <span class="token comment">// 1 - 1; 1 + (-1);</span>
  <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0001</span> <span class="token comment">// 1补码</span>
  <span class="token number">1111</span> <span class="token number">1111</span> <span class="token number">1111</span> <span class="token number">1111</span> <span class="token number">1111</span> <span class="token number">1111</span> <span class="token number">1111</span> <span class="token number">1111</span>   <span class="token comment">// -1补码</span>
  <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>
 <span class="token number">10000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token comment">// 计算结果补码</span>
  <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token comment">//  == 0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="" tabindex="-1"><a class="header-anchor" href="#" aria-hidden="true">#</a></h2>`,5),l=[o];function t(r,c){return n(),a("div",null,l)}const u=s(p,[["render",t],["__file","12.html.vue"]]);export{u as default};
