import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e}from"./app-a1fbcbb6.js";const t="/assets/a5f93efcc499ec5ea5bcd9d338972c8a-d899d54d.png",i="/assets/a21ccb686fca0771cd10af728c270cd2-be12f382.png",c="/assets/d7542b666e2558d47daf9cb7d631ddaf-edc4a5e9.png",p="/assets/4a8afead10db1343317a7368fb3042ca-9547f402.png",l="/assets/0036733ed61b532efc2ef9907ba267bd-96322a60.png",o="/assets/97092b77d385d7f19e815f818dd0ec57-44d571ca.png",u="/assets/9d800a25ef0a1a9679b64a25de4b979b-11ee3156.png",d={},r=e('<h2 id="如何运行编写好的程序" tabindex="-1"><a class="header-anchor" href="#如何运行编写好的程序" aria-hidden="true">#</a> 如何运行编写好的程序</h2><h3 id="方式-1" tabindex="-1"><a class="header-anchor" href="#方式-1" aria-hidden="true">#</a> 方式 1:</h3><ul><li>点击小榔头将&quot;源代码&quot;编译成&quot;可执行文件&quot;</li><li>找到编译后的源代码, 打开终端(CMD)运行可执行文件<br><img src="'+t+'" alt="Alt text" loading="lazy"><br><img src="'+i+'" alt="Alt text" loading="lazy"><br><img src="'+c+'" alt="Alt text" loading="lazy"><br><img src="'+p+'" alt="Alt text" loading="lazy"><br><img src="'+l+'" alt="Alt text" loading="lazy"></li></ul><h3 id="方式-2" tabindex="-1"><a class="header-anchor" href="#方式-2" aria-hidden="true">#</a> 方式 2</h3><ul><li>直接点击 Qt 开发工具运行按钮<br><img src="'+o+'" alt="Alt text" loading="lazy"><br><img src="'+u+`" alt="Alt text" loading="lazy"></li></ul><hr><h2 id="main-函数注意点及其它写法" tabindex="-1"><a class="header-anchor" href="#main-函数注意点及其它写法" aria-hidden="true">#</a> main 函数注意点及其它写法</h2><ol><li><p>C 语言中,每条完整的语句后面都必须以分号结尾</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;hello world\\n&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 如果没有分号编译时会报错</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// 如果没有分号,多条语句合并到一行时, 系统不知道从什么地方到什么地方是一条完整语句</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;hello world\\n&quot;</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>C 语言中除了注释和双引号引起来的地方以外都不能出现中文</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;hello world\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 这里的分号如果是中文的分号就会报错</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>一个 C 语言程序只能有一个 main 函数</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// 编译时会报错, 重复定义</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>一个 C 语言程序不能没有 main 函数</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// 编译时报错, 因为只有call函数, 没有main函数</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">mian</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// 编译时报错, 因为main函数的名称写错了,还是相当于没有main函数</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>main 函数前面的 int 可以不写或者换成 void</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// 不会报错</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;hello world\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">// 不会报错</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;hello world\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>main 函数中的 return 0 可以不写</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// 不会报错</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;hello world\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="多种写法不报错的原因" tabindex="-1"><a class="header-anchor" href="#多种写法不报错的原因" aria-hidden="true">#</a> 多种写法不报错的原因</h2><ul><li>C 语言最早的时候只是一种规范和标准(例如 C89, C11 等)</li><li>标准的推行需要各大厂商的支持和实施</li><li>而在支持的实施的时候由于各大厂商利益、理解等问题,导致了实施的标准不同,发生了变化 <ul><li>Turbo C</li><li>Visual C(VC)</li><li>GNU C(GCC)</li></ul></li><li>所以大家才会看到不同的书上书写的格式有所不同, 有的返回 int,有的返回 void,有的甚至没有返回值</li><li>所以大家只需要记住最标准的写法即可</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;hello world\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><blockquote><p><strong>语法错误</strong>：编译器会直接报错<br><strong>逻辑错误</strong>：没有语法错误，只不过运行结果不正确</p></blockquote></div>`,12),k=[r];function m(v,b){return s(),a("div",null,k)}const f=n(d,[["render",m],["__file","08.html.vue"]]);export{f as default};
