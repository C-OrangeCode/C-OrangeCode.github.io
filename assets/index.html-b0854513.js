import{_ as r}from"./plugin-vue_export-helper-c27b6911.js";import{r as s,o as n,c as p,a as e,b as t,d as i,e as o}from"./app-a1fbcbb6.js";const a={},c=e("h2",{id:"typescript-简介",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#typescript-简介","aria-hidden":"true"},"#"),t(" TypeScript 简介")],-1),d={href:"https://www.typescriptlang.org/zh/docs/",target:"_blank",rel:"noopener noreferrer"},S=o('<ol><li><strong><code>TypeScript</code> 简称：TS，是 JavaScript 的超集</strong>，简单来说就是：JS 有的 TS 都有。</li><li>它对 JS 进行了扩展，向 JS 中引入了类型的概念，并添加了许多新的特性。</li><li>TS 代码需要通过编译器编译为 JS，然后再交由 JS 解析器执行。</li><li>TS 完全兼容 JS，换言之，任何的 JS 代码都可以直接当成 JS 使用。</li><li>相较于 JS 而言，TS 拥有了静态类型，更加严格的语法，更强大的功能；TS 可以在代码执行前就完成代码的检查，减小了运行时异常的出现的几率；TS 代码可以编译为任意版本的 JS 代码，可有效解决不同 JS 运行环境的兼容问题；同样的功能，TS 的代码量要大于 JS，但由于 TS 的代码结构更加清晰，变量类型更加明确，在后期代码的维护中 TS 却远远胜于 JS。</li></ol><blockquote><p>TS 和 JS 之间的关系其实就是 Less/Sass 和 CSS 之间的关系<br> 就像 Less/Sass 是对 CSS 进行扩展一样, TS 也是对 JS 进行扩展<br> 就像 Less/Sass 最终会转换成 CSS 一样, 我们编写好的 TS 代码最终也会换成 JS</p></blockquote><h2 id="为什么要有-typescript" tabindex="-1"><a class="header-anchor" href="#为什么要有-typescript" aria-hidden="true">#</a> 为什么要有 typescript</h2><ul><li>背景：JS 的类型系统存在“先天缺陷”弱类型，JS 代码中绝大部分错误都是类型错误（Uncaught TypeError） <ul><li>开发的时候，定义的变量本应该就有类型</li></ul></li><li>这些经常出现的错误，导致了在使用 JS 进行项目开发时，增加了找 Bug、改 Bug 的时间，严重影响开发效率</li><li>从编程语言的动静来区分，<strong>TypeScript 属于静态类型的编程语言</strong>，<strong>JavaScript 属于动态类型的编程语言</strong><ul><li>静态类型：<strong>编译</strong>期做类型检查</li><li>动态类型：<strong>执行</strong>期做类型检查</li></ul></li><li>代码编译和代码执行的顺序：1 编译 2 执行</li><li>对于 JS 来说：需要等到代码真正去执行的时候才能发现错误（晚）</li><li>对于 TS 来说：在代码编译的时候（代码执行前）就可以发现错误（早）</li></ul><p>并且，配合 VSCode 等开发工具，TS 可以提前到<strong>在编写代码的同时就发现代码中的错误</strong>，减少找 Bug、改 Bug 时间</p><p>对比：</p><ul><li>使用 JS： <ol><li>在 VSCode 里面写代码</li><li>在浏览器中运行代码 --&gt; 运行时，才会发现错误【晚】</li></ol></li><li>使用 TS： <ol><li>在 VSCode 里面写代码 --&gt; 写代码的同时，就会发现错误【早】</li><li>在浏览器中运行代码</li></ol></li></ul><blockquote><p>简单来说就是因为 JavaScript 是弱类型, 很多错误只有在运行时才会被发现<br> 而 TypeScript 提供了一套静态检测机制, 可以帮助我们在编译时就发现错误</p></blockquote><h2 id="typescript-相比-js-的优势" tabindex="-1"><a class="header-anchor" href="#typescript-相比-js-的优势" aria-hidden="true">#</a> TypeScript 相比 JS 的优势</h2><ol><li>更早（写代码的同时）发现错误，减少找 Bug、改 Bug 时间，提升开发效率。</li><li>程序中任何位置的代码都有提示，随时随地的安全感，增强了开发体验。</li><li>强大的类型系统提升了代码的可维护性，使得重构代码更加容易。</li><li>支持最新的 ECMAScript 语法，优先体验最新的语法，让你走在前端技术的最前沿。</li><li>TS 类型判断机制，不需要再代码中的每个地方都演示标注类型，让你在享受优势的同时，尽量降低来了成本。</li></ol><p>除此之外，Vue 3 源码使用 TS 重写、Angular 默认支持 TS、React 与 TS 完美配合，TypeScript 已成为大中型前端 项目的首选编程语言。</p><p>目前，前端最新的开发技术栈：</p><ol><li>React： TS + Hooks</li><li>Vue： TS + Vue3</li></ol><ul><li>注意： Vue2 对 TS 的支持不好~</li></ul><h1 id="typescript-初体验" tabindex="-1"><a class="header-anchor" href="#typescript-初体验" aria-hidden="true">#</a> TypeScript 初体验</h1><h2 id="_2-1-typescript-开发环境搭建" tabindex="-1"><a class="header-anchor" href="#_2-1-typescript-开发环境搭建" aria-hidden="true">#</a> 2.1 TypeScript 开发环境搭建</h2><p>问题：为什么要安装编译 TS 的工具包？</p><p>回答：Node.js/浏览器，只认识 JS 代码，不认识 TS 代码。需要将 TS 代码转化为 JS 代码，然后才能运行。</p>',18),h={href:"https://nodejs.org/dist/v14.15.1/node-v14.15.1-x64.msi",target:"_blank",rel:"noopener noreferrer"},u={href:"https://nodejs.org/dist/v14.15.1/node-v14.15.1-x86.msi",target:"_blank",rel:"noopener noreferrer"},g=e("li",null,"安装 Node.js",-1),T=e("li",null,[t("使用 pnpm 全局安装 typescript "),e("ul",null,[e("li",null,"进入命令行"),e("li",null,"输入：pnpm i -g typescript")])],-1),_=o('<blockquote><ul><li>typescript 包：用来编译 TS 代码的包，提供了 <code>tsc</code> 命令，实现了 TS -&gt; JS 的转化</li><li>验证是否安装成功：tsc –v(查看 typescript 的版本)</li></ul></blockquote><figure><img src="https://i0.hdslb.com/bfs/album/ee182b1c607104b3bf9d296af15389c0b49b14fd.png" alt="image-20220805183234278" tabindex="0" loading="lazy"><figcaption>image-20220805183234278</figcaption></figure><h2 id="_2-2-编译并运行-ts-代码" tabindex="-1"><a class="header-anchor" href="#_2-2-编译并运行-ts-代码" aria-hidden="true">#</a> 2.2 编译并运行 TS 代码</h2><ul><li><p>创建 hello.ts 文件（注意：<strong>TS 文件的后缀名为 <code>.ts</code></strong>）</p></li><li><p>将 TS 编译为 JS：在终端中输入命令，<code>tsc hello.ts</code>（此时，在同级目录中会出现一个同名的 JS 文件）</p></li><li><p>执行 JS 代码：在终端中输入命令，<code>node hello.js</code></p></li></ul><p>1 创建 ts 文件 ===&gt; 2 编译 TS ===&gt; 3 执行 JS</p><ul><li>说明：所有合法的 JS 代码都是 TS 代码，有 JS 基础只需要学习 TS 的类型即可</li><li>注意：由 TS 编译生成的 JS 文件，代码中就没有类型信息了</li></ul><p><strong>真正在开发过程中，其实不需要自己手动的通过 tsc 把 ts 文件转成 js 文件，这些工作应该交给 webpack 或者 vite 来完成</strong></p><h2 id="_2-3-简化运行-ts-的步骤" tabindex="-1"><a class="header-anchor" href="#_2-3-简化运行-ts-的步骤" aria-hidden="true">#</a> 2.3 简化运行 TS 的步骤</h2><p>问题描述：每次修改代码后，都要重复执行两个命令，才能运行 TS 代码，太繁琐。</p><p>简化方式：使用 ts-node 包，直接在 Node.js 中执行 TS 代码。</p><p>安装命令：<code>pnpm i -g ts-node</code>(ts-node 包提供了 ts-node 命令)。</p><p>使用方式：<code>ts-node hello.ts</code>。(遇到错误了：在安装完 ts-node 之后执行这个使用命令会报错，原因是缺少安装东西，执行命令 <code>pnpm install -g tslib @types/node</code>)</p><p>解释：ts-node 命令在内部偷偷的将 TS-&gt;JS，然后，再运行 JS 代码。</p><h2 id="_2-4-官方-playground" tabindex="-1"><a class="header-anchor" href="#_2-4-官方-playground" aria-hidden="true">#</a> 2.4 官方 playground</h2>',14),y={href:"https://link.juejin.cn?target=https%3A%2F%2Fwww.typescriptlang.org%2Fzh%2Fplay",target:"_blank",rel:"noopener noreferrer"},J=e("p",null,"基于它，我们无须在本地安装环境，只需要一个浏览器即可随时学习和编写 TypeScript，同时还可以方便地选择 TypeScript 版本、配置 tsconfig，并对 TypeScript 实时静态类型检测、转译输出 JavaScript 和在线执行。",-1),b=e("p",null,"而且在体验上，它也一点儿不逊色于任何本地的 IDE，对于刚刚学习 TypeScript 的我们来说，算是一个不错的选择",-1);function f(m,x){const l=s("ExternalLinkIcon");return n(),p("div",null,[c,e("ul",null,[e("li",null,[e("a",d,[t("TS 官方文档"),i(l)])])]),S,e("ol",null,[e("li",null,[t("下载 Node.js "),e("ul",null,[e("li",null,[t("64 位："),e("a",h,[t("https://nodejs.org/dist/v14.15.1/node-v14.15.1-x64.msi"),i(l)])]),e("li",null,[t("32 位："),e("a",u,[t("https://nodejs.org/dist/v14.15.1/node-v14.15.1-x86.msi"),i(l)])])])]),g,T]),_,e("p",null,[t("官方也提供了一个在线开发 TypeScript 的云环境——"),e("a",y,[t("Playground"),i(l)]),t("。")]),J,b])}const j=r(a,[["render",f],["__file","index.html.vue"]]);export{j as default};
