import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e}from"./app-a1fbcbb6.js";const t={},p=e(`<h2 id="const关键字" tabindex="-1"><a class="header-anchor" href="#const关键字" aria-hidden="true">#</a> const关键字</h2><ul><li>const是一个类型修饰符</li></ul><ul><li>使用const修饰变量则可以让变量的值不能改变<br> ##const有什么主要的作用?</li></ul><ul><li>(1)可以定义const常量,具有不可变性</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">const</span> <span class="token keyword">int</span> Max<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> Array<span class="token punctuation">[</span>Max<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>(2)便于进行类型检查,使编译器对处理内容有更多了解,消除了一些隐患。</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code> <span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>编译器就会知道i是一个常量,不允许修改;</li></ul><ul><li><p>(3)可以避免意义模糊的数字出现,同样可以很方便地进行参数的调整和修改。 同宏定义一样,可以做到不变则已,一变都变!如(1)中,如果想修改Max的内容,只需要:const int Max=you want;即可!</p></li><li><p>(4)可以保护被修饰的东西,防止意外的修改,增强程序的健壮性。 还是上面的例子,如果在 函数体内修改了i,编译器就会报错;</p></li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span> i<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//error! }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>(5) 可以节省空间,避免不必要的内存分配。</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PI</span> <span class="token expression"><span class="token number">3.14159</span> </span><span class="token comment">//常量宏</span></span>
<span class="token keyword">const</span> doulbe Pi<span class="token operator">=</span><span class="token number">3.14159</span><span class="token punctuation">;</span> <span class="token comment">//此时并未将Pi放入ROM中 ...... double i=Pi; //此时为Pi分配内存,以后不再分配!</span>
<span class="token keyword">double</span> I<span class="token operator">=</span>PI<span class="token punctuation">;</span> <span class="token comment">//编译期间进行宏替换,分配内存</span>
<span class="token keyword">double</span> j<span class="token operator">=</span>Pi<span class="token punctuation">;</span> <span class="token comment">//没有内存分配</span>
<span class="token keyword">double</span> J<span class="token operator">=</span>PI<span class="token punctuation">;</span> <span class="token comment">//再进行宏替换,又一次分配内存! const定义常量从汇编的角度来看,只是给出了对应的内存地址,而不是象#define一样给出的是立即数,所以,const定义的常量在程序运行过程中只有一份拷贝,而#define定义的常量在内存 中有若干个拷贝。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>(6) 􏰀高了效率。编译器通常不为普通const常量分配存储空间,而是将它们保存在符号表 中,这使得它成为一个编译期间的常量,没有了存储与读内存的操作,使得它的效率也很高。</li></ul><hr><h2 id="如何使用const" tabindex="-1"><a class="header-anchor" href="#如何使用const" aria-hidden="true">#</a> 如何使用const?</h2><ul><li>(1)修饰一般常量一般常量是指简单类型的常量。这种常量在定义时,修饰符const可以用在类型说明符前,也可以用在类型说明符后</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token keyword">const</span> x<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span> 或 <span class="token keyword">const</span> <span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>(当然,我们可以偷梁换柱进行更新: 通过强制类型转换,将地址赋给变量,再作修改即可以改变const常量值。)</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>    <span class="token comment">// const对于基本数据类型, 无论写在左边还是右边, 变量中的值不能改变</span>
    <span class="token keyword">const</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
    <span class="token comment">// a = 666; // 直接修改会报错</span>
    <span class="token comment">// 偷梁换柱, 利用指针指向变量</span>
    <span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>
    p <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span>
    <span class="token comment">// 利用指针间接修改变量中的值</span>
    <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span> <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>(2)修饰常数组(值不能够再改变了)定义或说明一个常数组可采用如下格式:</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token keyword">const</span> a<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>const int a[5]={1, 2, 3, 4, 5};
a[1] = 55; // 错误
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>(3)修饰函数的常参数const修饰符也可以修饰函数的传递参数,格式如下:void Fun(const int Var); 告诉编译器Var在函数体中的无法改变,从而防止了使用者的一些无 意的或错误的修改。</p></li><li><p>(4)修饰函数的返回值: const修饰符也可以修饰函数的返回值,是返回值不可被改变,格式如 下:</p></li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token function">Fun1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> MyClass <span class="token function">Fun2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>(5)修饰常指针</p><ul><li>const int *A; //const修饰指针,A可变,A指向的值不能被修改</li><li>int const *A; //const修饰指向的对象,A可变,A指向的对象不可变</li><li>int *const A; //const修饰指针A, A不可变,A指向的对象可变</li><li>const int *const A;//指针A和A指向的对象都不可变</li></ul></li><li><p>技巧</p></li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code> 先看“<span class="token operator">*</span>”的位置
 如果<span class="token keyword">const</span> 在 <span class="token operator">*</span>的左侧 表示值不能修改<span class="token punctuation">,</span>但是指向可以改。
 如果<span class="token keyword">const</span> 在 <span class="token operator">*</span>的右侧 表示指向不能改<span class="token punctuation">,</span>但是值可以改
 如果在“<span class="token operator">*</span>”的两侧都有<span class="token keyword">const</span> 标识指向和值都不能改。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,26),o=[p];function c(l,i){return s(),a("div",null,o)}const d=n(t,[["render",c],["__file","39.html.vue"]]);export{d as default};
