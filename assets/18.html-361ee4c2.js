import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e as t}from"./app-a1fbcbb6.js";const p={},c=t(`<h2 id="printf-函数" tabindex="-1"><a class="header-anchor" href="#printf-函数" aria-hidden="true">#</a> printf 函数</h2><figure><img src="https://img-blog.csdnimg.cn/img_convert/1a1d70de9ee22c638b43de8009048570.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>printf 函数称之为格式输出函数,方法名称的最后一个字母 f 表示 format。其功能是按照用户指定的格式,把指定的数据输出到屏幕上</li><li>printf 函数的调用格式为: <ul><li><code>printf(&quot;格式控制字符串&quot;,输出项列表 );</code></li><li>例如:<code>printf(&quot;a = %d, b = %d&quot;,a, b);</code><br><img src="https://img-blog.csdnimg.cn/img_convert/30dae0fb7fa2f93706031066d3cd99cf.png" alt="" loading="lazy"></li><li>非格式字符串原样输出, 格式控制字符串会被输出项列表中的数据替换</li><li>注意: 格式控制字符串和输出项在数量和类型上**<em>必须一一对应</em>**</li></ul></li></ul><hr><ul><li>格式控制字符串 <ul><li>形式: <code>%[标志][输出宽度][.精度][长度]类型</code></li></ul></li></ul><hr><ul><li>类型 <ul><li>格式: <code>printf(&quot;a = %类型&quot;, a);</code></li><li>类型字符串用以表示输出数据的类型, 其格式符和意义如下所示</li></ul></li></ul><table><thead><tr><th>类型</th><th>含义</th></tr></thead><tbody><tr><td>d</td><td>有符号 10 进制整型</td></tr><tr><td>i</td><td>有符号 10 进制整型</td></tr><tr><td>u</td><td>无符号 10 进制整型</td></tr><tr><td>o</td><td>无符号 8 进制整型</td></tr><tr><td>x</td><td>无符号 16 进制整型</td></tr><tr><td>X</td><td>无符号 16 进制整型</td></tr><tr><td>f</td><td>单、双精度浮点数(默认保留 6 位小数)</td></tr><tr><td>e / E</td><td>以指数形式输出单、双精度浮点数</td></tr><tr><td>g / G</td><td>以最短输出宽度,输出单、双精度浮点数</td></tr><tr><td>c</td><td>字符</td></tr><tr><td>s</td><td>字符串</td></tr><tr><td>p</td><td>地址</td></tr></tbody></table><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token keyword">float</span> c <span class="token operator">=</span> <span class="token number">6.6f</span><span class="token punctuation">;</span>
    <span class="token keyword">double</span> d <span class="token operator">=</span> <span class="token number">3.1415926</span><span class="token punctuation">;</span>
    <span class="token keyword">double</span> e <span class="token operator">=</span> <span class="token number">10.10</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> f <span class="token operator">=</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">;</span>
    <span class="token comment">// 有符号整数(可以输出负数)</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;a = %d\\n&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;a = %i\\n&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10</span>

    <span class="token comment">// 无符号整数(不可以输出负数)</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;a = %u\\n&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;b = %u\\n&quot;</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 429496786</span>

    <span class="token comment">// 无符号八进制整数(不可以输出负数)</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;a = %o\\n&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 12</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;b = %o\\n&quot;</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 37777777766</span>

    <span class="token comment">// 无符号十六进制整数(不可以输出负数)</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;a = %x\\n&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// a</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;b = %x\\n&quot;</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// fffffff6</span>

    <span class="token comment">// 无符号十六进制整数(不可以输出负数)</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;a = %X\\n&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// A</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;b = %X\\n&quot;</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// FFFFFFF6</span>

    <span class="token comment">// 单、双精度浮点数(默认保留6位小数)</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;c = %f\\n&quot;</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 6.600000</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;d = %lf\\n&quot;</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3.141593</span>

    <span class="token comment">// 以指数形式输出单、双精度浮点数</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;e = %e\\n&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1.010000e+001</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;e = %E\\n&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1.010000E+001</span>

    <span class="token comment">// 以最短输出宽度,输出单、双精度浮点数</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;e = %g\\n&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10.1</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;e = %G\\n&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10.1</span>

    <span class="token comment">// 输出字符</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;f = %c\\n&quot;</span><span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// a</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><ul><li>宽度 <ul><li>格式: <code>printf(&quot;a = %[宽度]类型&quot;, a);</code></li><li>用十进制整数来指定输出的宽度, 如果实际位数多于指定宽度,则按照实际位数输出, 如果实际位数少于指定宽度则以空格补位</li></ul></li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// 实际位数小于指定宽度</span>
    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;a =|%d|\\n&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// |1|</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;a =|%5d|\\n&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// |    1|</span>
    <span class="token comment">// 实际位数大于指定宽度</span>
    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">1234567</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;b =|%d|\\n&quot;</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// |1234567|</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;b =|%5d|\\n&quot;</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// |1234567|</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><ul><li>标志 <ul><li>格式: <code>printf(&quot;a = %[标志][宽度]类型&quot;, a);</code></li></ul></li></ul><table><thead><tr><th>标志</th><th>含义</th></tr></thead><tbody><tr><td>-</td><td>左对齐, 默认右对齐</td></tr><tr><td>+</td><td>当输出值为正数时,在输出值前面加上一个+号, 默认不显示</td></tr><tr><td>0</td><td>右对齐时, 用 0 填充宽度.(默认用空格填充)</td></tr><tr><td>空格</td><td>输出值为正数时,在输出值前面加上空格, 为负数时加上负号</td></tr><tr><td>#</td><td>对 c、s、d、u 类型无影响</td></tr><tr><td>#</td><td>对 o 类型, 在输出时加前缀 o</td></tr><tr><td>#</td><td>对 x 类型,在输出时加前缀 0x</td></tr></tbody></table><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token comment">// -号标志</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;a =|%d|\\n&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// |1|</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;a =|%5d|\\n&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// |    1|</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;a =|%-5d|\\n&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// |1    |</span>
    <span class="token comment">// +号标志</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;a =|%d|\\n&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// |1|</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;a =|%+d|\\n&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// |+1|</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;b =|%d|\\n&quot;</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// |-1|</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;b =|%+d|\\n&quot;</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// |-1|</span>
    <span class="token comment">// 0标志</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;a =|%5d|\\n&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// |    1|</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;a =|%05d|\\n&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// |00001|</span>
    <span class="token comment">// 空格标志</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;a =|% d|\\n&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// | 1|</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;b =|% d|\\n&quot;</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// |-1|</span>
    <span class="token comment">// #号</span>
    <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;c = %o\\n&quot;</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 12</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;c = %#o\\n&quot;</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 012</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;c = %x\\n&quot;</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// a</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;c = %#x\\n&quot;</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0xa</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><ul><li>精度 <ul><li>格式: <code>printf(&quot;a = %[精度]类型&quot;, a); </code></li><li>精度格式符以&quot;.&quot;开头, 后面跟上十进制整数, 用于指定需要输出多少位小数, 如果输出位数大于指定的精度, 则删除超出的部分</li></ul></li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">double</span> a <span class="token operator">=</span> <span class="token number">3.1415926</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;a = %.2f\\n&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3.14</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>动态指定保留小数位数 <ul><li>格式: <code>printf(&quot;a = %.*f&quot;, a);</code></li></ul></li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">double</span> a <span class="token operator">=</span> <span class="token number">3.1415926</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;a = %.*f&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3.14</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>实型(浮点类型)有效位数问题 <ul><li>对于单精度数,使用%f 格式符输出时,仅前 6~7 位是有效数字</li><li>对于双精度数,使用%lf 格式符输出时,前 15~16 位是有效数字</li><li>有效位数和精度(保留多少位)不同, 有效位数是指从第一个非零数字开始,误差不超过本数位半个单位的、精确可信的数位</li><li>有效位数包含小数点前的非零数位</li></ul></li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//        1234.567871093750000</span>
    <span class="token keyword">float</span> a <span class="token operator">=</span> <span class="token number">1234.567890123456789</span><span class="token punctuation">;</span>
    <span class="token comment">//         1234.567890123456900</span>
    <span class="token keyword">double</span> b <span class="token operator">=</span> <span class="token number">1234.567890123456789</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;a = %.15f\\n&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 前8位数字是准确的, 后面的都不准确</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;b = %.15f\\n&quot;</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 前16位数字是准确的, 后面的都不准确</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><ul><li>长度 <ul><li>格式: <code>printf(&quot;a = %[长度]类型&quot;, a);</code></li></ul></li></ul><table><thead><tr><th>长度</th><th>修饰类型</th><th>含义</th></tr></thead><tbody><tr><td>hh</td><td>d、i、o、u、x</td><td>输出 char</td></tr><tr><td>h</td><td>d、i、o、u、x</td><td>输出 short int</td></tr><tr><td>l</td><td>d、i、o、u、x</td><td>输出 long int</td></tr><tr><td>ll</td><td>d、i、o、u、x</td><td>输出 long long int</td></tr></tbody></table><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">char</span> a <span class="token operator">=</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">short</span> <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span>  c <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">long</span> <span class="token keyword">int</span> d <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token keyword">int</span> e <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;a = %hhd\\n&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 97</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;b = %hd\\n&quot;</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 123</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;c = %d\\n&quot;</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 123</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;d = %ld\\n&quot;</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 123</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;e = %lld\\n&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 123</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>转义字符 <ul><li>格式: <code>printf(&quot;%f%%&quot;, 3.1415);</code></li><li>%号在格式控制字符串中有特殊含义, 所以想输出%必须添加一个转移字符</li></ul></li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%f%%&quot;</span><span class="token punctuation">,</span> <span class="token number">3.1415</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出结果3.1415%</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="scanf-函数" tabindex="-1"><a class="header-anchor" href="#scanf-函数" aria-hidden="true">#</a> Scanf 函数</h2><ul><li>scanf 函数用于接收键盘输入的内容, 是一个阻塞式函数,程序会停在 scanf 函数出现的地方, 直到接收到数据才会执行后面的代码</li><li>printf 函数的调用格式为:</li></ul><ul><li><code>scanf(&quot;格式控制字符串&quot;, 地址列表);</code></li><li>例如: <code>scanf(&quot;%d&quot;, &amp;num);</code><br><img src="https://img-blog.csdnimg.cn/img_convert/6df3856aa41baa48cfc65ead2e0294de.png" alt="" loading="lazy"></li></ul><hr><ul><li>基本用法</li></ul><ul><li>地址列表项中只能传入变量地址, 变量地址可以通过&amp;符号+变量名称的形式获取</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> number<span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 接收一个整数</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;number = %d\\n&quot;</span><span class="token punctuation">,</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>接收非字符和字符串类型时, 空格、Tab 和回车会被忽略</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">float</span> num<span class="token punctuation">;</span>
    <span class="token comment">// 例如:输入 Tab 空格 回车 回车 Tab 空格 3.14 , 得到的结果还是3.14</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%f&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;num = %f\\n&quot;</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>非格式字符串原样输入, 格式控制字符串会赋值给地址项列表项中的变量</li></ul><ul><li>不推荐这种写法</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> number<span class="token punctuation">;</span>
    <span class="token comment">// 用户必须输入number = 数字  , 否则会得到一个意外的值</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;number = %d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;number = %d\\n&quot;</span><span class="token punctuation">,</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>接收多条数据</li></ul><ul><li>格式控制字符串和地址列表项在数量和类型上必须一一对应</li><li>非字符和字符串情况下如果没有指定多条数据的分隔符, 可以使用空格或者回车作为分隔符(不推荐这种写法)</li><li>非字符和字符串情况下建议明确指定多条数据之间分隔符</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> number<span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;number = %d\\n&quot;</span><span class="token punctuation">,</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> value<span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;value = %d\\n&quot;</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> number<span class="token punctuation">;</span>
    <span class="token keyword">int</span> value<span class="token punctuation">;</span>
    <span class="token comment">// 可以输入 数字 空格 数字, 或者 数字 回车 数字</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d%d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>number<span class="token punctuation">,</span> <span class="token operator">&amp;</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;number = %d\\n&quot;</span><span class="token punctuation">,</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;value = %d\\n&quot;</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> number<span class="token punctuation">;</span>
    <span class="token keyword">int</span> value<span class="token punctuation">;</span>
    <span class="token comment">// 输入 数字,数字 即可</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d,%d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>number<span class="token punctuation">,</span> <span class="token operator">&amp;</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;number = %d\\n&quot;</span><span class="token punctuation">,</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;value = %d\\n&quot;</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>\\n 是 scanf 函数的结束符号, 所以格式化字符串中不能出现\\n</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> number<span class="token punctuation">;</span>
    <span class="token comment">// 输入完毕之后按下回车无法结束输入</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;number = %d\\n&quot;</span><span class="token punctuation">,</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="scanf-运行原理" tabindex="-1"><a class="header-anchor" href="#scanf-运行原理" aria-hidden="true">#</a> scanf 运行原理</h3><ul><li>系统会将用户输入的内容先放入输入缓冲区</li><li>scanf 方式会从输入缓冲区中逐个取出内容赋值给变量</li><li>如果输入缓冲区的内容不为空,scanf 会一直从缓冲区中获取,而不要求再次输入</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> num1<span class="token punctuation">;</span>
    <span class="token keyword">int</span> num2<span class="token punctuation">;</span>
    <span class="token keyword">char</span> ch1<span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d%c%d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>num1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ch1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>num2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;num1 = %d, ch1 = %c, num2 = %d\\n&quot;</span><span class="token punctuation">,</span> num1<span class="token punctuation">,</span> ch1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> ch2<span class="token punctuation">;</span>
    <span class="token keyword">int</span> num3<span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%c%d&quot;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>ch2<span class="token punctuation">,</span> <span class="token operator">&amp;</span>num3<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;ch2 = %c, num3 = %d\\n&quot;</span><span class="token punctuation">,</span> ch2<span class="token punctuation">,</span> num3<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://img-blog.csdnimg.cn/img_convert/29187affda3f7e082e9067fbfb927769.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>利用 fflush 方法清空缓冲区(不是所有平台都能使用) <ul><li>格式: <code>fflush(stdin);</code></li><li>C 和 C++的标准里从来没有定义过 fflush(stdin)</li><li>MSDN 文档里清除的描述着&quot;fflush on input stream is an extension to the C standard&quot; （fflush 是在标准上扩充的函数, 不是标准函数, 所以不是所有平台都支持）</li></ul></li><li>利用 setbuf 方法清空缓冲区(所有平台有效) <ul><li>格式: <code>setbuf(stdin, NULL);</code></li></ul></li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> num1<span class="token punctuation">;</span>
    <span class="token keyword">int</span> num2<span class="token punctuation">;</span>
    <span class="token keyword">char</span> ch1<span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d%c%d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>num1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ch1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>num2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;num1 = %d, ch1 = %c, num2 = %d\\n&quot;</span><span class="token punctuation">,</span> num1<span class="token punctuation">,</span> ch1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//fflush(stdin); // 清空输入缓存区</span>
    <span class="token function">setbuf</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 清空输入缓存区</span>
    <span class="token keyword">char</span> ch2<span class="token punctuation">;</span>
    <span class="token keyword">int</span> num3<span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%c%d&quot;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>ch2<span class="token punctuation">,</span> <span class="token operator">&amp;</span>num3<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;ch2 = %c, num3 = %d\\n&quot;</span><span class="token punctuation">,</span> ch2<span class="token punctuation">,</span> num3<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="putchar-和-getchar" tabindex="-1"><a class="header-anchor" href="#putchar-和-getchar" aria-hidden="true">#</a> putchar 和 getchar</h2><ul><li>putchar: 向屏幕输出一个字符</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">char</span> ch <span class="token operator">=</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">;</span>
    <span class="token function">putchar</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出a</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>getchar: 从键盘获得一个字符</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">char</span> ch<span class="token punctuation">;</span>
    ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取一个字符</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;ch = %c\\n&quot;</span><span class="token punctuation">,</span> ch<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,61),e=[c];function o(i,l){return s(),a("div",null,e)}const k=n(p,[["render",o],["__file","18.html.vue"]]);export{k as default};
