import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e}from"./app-a1fbcbb6.js";const p={},t=e(`<h2 id="位运算符" tabindex="-1"><a class="header-anchor" href="#位运算符" aria-hidden="true">#</a> 位运算符</h2><ul><li>程序中的所有数据在计算机内存中都是以二进制的形式储存的。</li><li>位运算就是直接对整数在内存中的二进制位进行操作</li><li>C语言提供了6个位操作运算符, 这些运算符只能用于整型操作数</li></ul><table><thead><tr><th>符号</th><th>名称</th><th>运算结果</th></tr></thead><tbody><tr><td>&amp;</td><td>按位与</td><td>同1为1</td></tr><tr><td>|</td><td>按位或</td><td>有1为1</td></tr><tr><td>^</td><td>按位异或</td><td>不同为1</td></tr><tr><td>~</td><td>按位取反</td><td>0变1,1变0</td></tr><tr><td>&lt;&lt;</td><td>按位左移</td><td>乘以2的n次方</td></tr><tr><td>&gt;&gt;</td><td>按位右移</td><td>除以2的n次方</td></tr></tbody></table><hr><ul><li>按位与: <ul><li>只有对应的两个二进位均为1时，结果位才为1，否则为0</li><li>规律: 二进制中，与1相&amp;就保持原位，与0相&amp;就为0</li></ul></li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>9&amp;5 = 1

 1001
&amp;0101
------
 0001
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><ul><li>按位或: <ul><li>只要对应的二个二进位有一个为1时，结果位就为1，否则为0</li></ul></li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">9</span><span class="token operator">|</span><span class="token number">5</span> <span class="token operator">=</span> <span class="token number">13</span>

 <span class="token number">1001</span>
<span class="token operator">|</span><span class="token number">0101</span>
<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>
 <span class="token number">1101</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><ul><li>按位异或 <ul><li>当对应的二进位相异（不相同）时，结果为1，否则为0</li><li>规律: <ul><li>相同整数相的结果是0。比如55=0</li><li>多个整数相^的结果跟顺序无关。例如: 567=576</li><li>同一个数异或另外一个数两次, 结果还是那个数。例如: 577 = 5</li></ul></li></ul></li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">9</span><span class="token operator">^</span><span class="token number">5</span> <span class="token operator">=</span> <span class="token number">12</span>

 <span class="token number">1001</span>
<span class="token operator">^</span><span class="token number">0101</span>
<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>
 <span class="token number">1100</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><ul><li>按位取反 <ul><li>各二进位进行取反（0变1，1变0）</li></ul></li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token operator">~</span><span class="token number">9</span> <span class="token operator">=</span><span class="token operator">-</span><span class="token number">10</span>
<span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">1001</span> <span class="token comment">// 取反前</span>
<span class="token number">1111</span> <span class="token number">1111</span> <span class="token number">1111</span> <span class="token number">1111</span> <span class="token number">1111</span> <span class="token number">0110</span> <span class="token comment">// 取反后</span>

<span class="token comment">// 根据负数补码得出结果</span>
<span class="token number">1111</span> <span class="token number">1111</span> <span class="token number">1111</span> <span class="token number">1111</span> <span class="token number">1111</span> <span class="token number">0110</span> <span class="token comment">// 补码</span>
<span class="token number">1111</span> <span class="token number">1111</span> <span class="token number">1111</span> <span class="token number">1111</span> <span class="token number">1111</span> <span class="token number">0101</span> <span class="token comment">// 反码</span>
<span class="token number">1000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">1010</span> <span class="token comment">// 源码 == -10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><ul><li><p>位运算应用场景:</p><ul><li>判断奇偶(按位或)</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>   偶数<span class="token operator">:</span> 的二进制是以<span class="token number">0</span>结尾
   <span class="token number">8</span>   <span class="token operator">-&gt;</span> <span class="token number">1000</span>
   <span class="token number">10</span>  <span class="token operator">-&gt;</span> <span class="token number">1010</span>
   
   奇数<span class="token operator">:</span> 的二进制是以<span class="token number">1</span>结尾
   <span class="token number">9</span>   <span class="token operator">-&gt;</span> <span class="token number">1001</span>
   <span class="token number">11</span>  <span class="token operator">-&gt;</span> <span class="token number">1011</span>

   任何数和<span class="token number">1</span>进行<span class="token operator">&amp;</span>操作<span class="token punctuation">,</span>得到这个数的最低位
   <span class="token number">1000</span>
  <span class="token operator">&amp;</span><span class="token number">0001</span>
   <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>
   <span class="token number">0000</span>  <span class="token comment">// 结果为0, 代表是偶数</span>

   <span class="token number">1011</span>
  <span class="token operator">&amp;</span><span class="token number">0001</span>
   <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>
   <span class="token number">0001</span> <span class="token comment">// 结果为1, 代表是奇数</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>权限系统</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>  <span class="token keyword">enum</span> <span class="token class-name">Unix</span> <span class="token punctuation">{</span>
    S_IRUSR <span class="token operator">=</span> <span class="token number">256</span><span class="token punctuation">,</span><span class="token comment">// 100000000 用户可读</span>
    S_IWUSR <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">,</span><span class="token comment">//  10000000 用户可写</span>
    S_IXUSR <span class="token operator">=</span> <span class="token number">64</span><span class="token punctuation">,</span><span class="token comment">//    1000000 用户可执行</span>
    S_IRGRP <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">,</span><span class="token comment">//     100000 组可读</span>
    S_IWGRP <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">,</span><span class="token comment">//      10000 组可写</span>
    S_IXGRP <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">,</span><span class="token comment">//        1000 组可执行</span>
    S_IROTH <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span><span class="token comment">//         100 其它可读</span>
    S_IWOTH <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token comment">//          10 其它可写</span>
    S_IXOTH <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment">//           1 其它可执行</span>
   <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 假设设置用户权限为可读可写</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span> S_IRUSR <span class="token operator">|</span> S_IWUSR<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 384 // 110000000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>交换两个数的值(按位异或)</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code> a <span class="token operator">=</span> a<span class="token operator">^</span>b<span class="token punctuation">;</span>
 b <span class="token operator">=</span> b<span class="token operator">^</span>a<span class="token punctuation">;</span>
 a <span class="token operator">=</span> a<span class="token operator">^</span>b<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><hr><ul><li>按位左移 <ul><li>把整数a的各二进位全部左移n位，高位丢弃，低位补0 <ul><li>由于左移是丢弃最高位，0补最低位，所以符号位也会被丢弃，左移出来的结果值可能会改变正负性</li></ul></li><li>规律: 左移n位其实就是乘以2的n次方</li></ul></li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">2</span><span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//相当于 2 *= 2 // 4</span>
  <span class="token number">0010</span>
<span class="token operator">&lt;&lt;</span><span class="token number">0100</span>

<span class="token number">2</span><span class="token operator">&lt;&lt;</span><span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">//相当于 2 *= 2^2; // 8</span>
  <span class="token number">0010</span>
<span class="token operator">&lt;&lt;</span><span class="token number">1000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>按位右移 <ul><li>把整数a的各二进位全部右移n位，保持符号位不变 <ul><li>为正数时， 符号位为0，最高位补0</li><li>为负数时，符号位为1，最高位是补0或是补1(取决于编译系统的规定)</li></ul></li><li>规律: 快速计算一个数除以2的n次方</li></ul></li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token number">2</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//相当于 2 /= 2 // 1</span>
  <span class="token number">0010</span>
<span class="token operator">&gt;&gt;</span><span class="token number">0001</span>
<span class="token number">4</span><span class="token operator">&gt;&gt;</span><span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">//相当于 4 /= 2^2 // 1</span>
  <span class="token number">0100</span>
<span class="token operator">&gt;&gt;</span><span class="token number">0001</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>练习: <ul><li>写一个函数把一个10进制数按照二进制格式输出</li></ul></li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">void</span> <span class="token function">printBinary</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printBinary</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">printBinary</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> temp<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        temp <span class="token operator">=</span> num<span class="token punctuation">;</span> <span class="token comment">//每次都在原数的基础上进行移位运算</span>
        temp <span class="token operator">=</span> temp<span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span><span class="token number">31</span><span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//每次移动的位数</span>
        <span class="token keyword">int</span> t <span class="token operator">=</span> temp<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//取出最后一位</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">!=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>i<span class="token operator">%</span><span class="token number">4</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="" tabindex="-1"><a class="header-anchor" href="#" aria-hidden="true">#</a></h2>`,25),l=[t];function o(c,i){return s(),a("div",null,l)}const d=n(p,[["render",o],["__file","13.html.vue"]]);export{d as default};
